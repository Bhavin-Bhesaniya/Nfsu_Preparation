C Overview :-
 - Developed by Dennis M. Ritchie at bell labs
 - First implmented in DEC PDP-11 Computer in 1972 and in 1978 Brain Kernigham and Dennis release Publicly(K&R)
 - Language Fromalized in 1988 ANSI(American National Standard Institute)
 - Unix totally written in C | Case sensitive | compiler based | Extension is .c | 
 - main() function from when code start execution
 - 0 or getch() "Exit Status" of program
 - ;(SemiColon) statement terminator
 
 Installation :- gcc -v on linux to check  |  MinGW  on windows
 Comment      :- Ignored by compiler       |  // - Single-line comment   |  /*..*/ - Multi-line comment 
 Token        :- Token is either keyword, identifier, constant, string literal or symbol
 Program execution      :- .c --> compiler --> .out(Executable Code) / .exe --> Output
 Preprocessor Directive :- Tells compiler Include library(stdio.h) file before going to actual compilation
 


Identifier :-
 - Set of Alphabet, letter and special character used to identify user-defined item 
 Types of Identifier :-   
  CharacterSet       - A-Z,a-z 
  Digit              - 0 to 9     
  Special Character  - 31
  WhiteSpace Character - Blank Space, Horizontal Tab, Carriage Return and Form Feed   



Literals :- 
 - Representing fixed values | Ex :-  1, 2.5, 'c' 

 Integer   :- Numeric without any fractional or exponential part     | 0, 077(Octal), 0x7f(Hexa)
 Floating  :- Numeric literal has either fractional or exponent form | -2.0, 0.00234, -0.22E-5 (E-5 = 10-5)
 Character :- Single character inside single quotation marks         | 'a', 'm', 'F', '2', '}'
 String    :- Sequence of character enclosed in double-quote marks   | "String" , "" ,  "    ", "S", 
 Constant  :- Value cannot be changed once declared (Preprocessor)   | const double PI = 3.14; #define LENGTH 10  
 void      :- Represents absence type 

 Escape Sequence :- Character with backslash which has special meaning
  \b - backspace  | \f - formfeed        | \\ - Backslash      | \n - newline         
  \r - return     | \? - Quotation Mark  | \t - Horizontal tab | \v - vertical tab
  \' - Single Quotation Mark  | \" - Double Quotation Mark     | \0 - Null Character


  
Variable :-
 - Container hold data which identify by its name
 - extern declare variable at any place
 - Inside function or block called local variable only access within function not accessible outside
 - Outside function variable called global variable accessed anywhere in program throughout program 
 
 Type  :- int  char  float  bool  double  void  wchar_t
 Other :- Enumeration  Pointer  Array  Reference  Classes

 Ex :- 
  int intValue = 10;   // declare variable with int type
  intValue = 10.10;    // Wrong cannot change int to float
  float a,v,c;         // Variablelist with no value
  int g = 10, n = 20;  // g represent memory location "lvalue" | 10 represent actual data "rvalue"

 Rules :-
  - First letter either alphabet or underscore cannot use digit or any special character
  - Name Must be unique 
  - Cannot use keyword  |  No comma/blank space  |  No special character use other than _(Underscore)
  


Data Types :-
 - Determine type and size of data that associated with variables 
 - String and boolean not exist
  
 Built-in :- 1 byte = 8 bit, 1 kb = 1024 byte, 1mb = 1024kb    
  Type          Size     Range              Format Specifier    Example 
  char	       1 byte	−128 to 127         %c                  char test = 'B';
  short	       2 byte	−32,768 to 32,767                       short a = 10;
  int	         2 byte	−32,768 to 32,767   %d, %i              int id  = 0;            |  -5, 10;
  float	       4 byte                     %f                  float no = 22.442e2;    
  double	     8 byte                     %lf                 double no = 22.442e2;
  long int     4 byte                     %ld, %li            long a;
  long double	 10 byte                    %Lf                 long double d;
  unsigned int  4 byte	0 to 65,535       %u                  unsigned int x = 35;
  
 Types of modifier :- Signed - Store both positive and negative number | Unsigned - Store only positive number
 Derive Data Type  :- Function, Arrays, Pointers, Reference
 User-Defined      :- Structure, Union, Enumeration, Typedef    


 Type Casting :-
  - Convert variable from one data type to another data type
  - Implicit conversion done by computer while explicitly casting done by cast operator
  Syntax :- (type_name) expression
  Example :-
    int sum = 17, count = 5;
    double mean;
    mean = (double) sum / count;
    printf("Value of mean : %f\n", mean );



Keyword :-
 - Special meaning for compiler that not used as identifier | Must written in lower case | 32 keyword in C
  void     int        char    double  float  short	signed  unsigned  long	
  if       else       switch  case    break  continue goto
  for      while      do      return
  const    enum       extern  default
  auto	   register	  struct
  volatile static	    sizeof	typedef union
   


Operator :- 
 - Symbol that operate on value or variable
 Arithmetic :-  +,  -,  *,  /, %(Reminder), ++, //
 Assignment :-  =, +=, -=, *=, /=, %= , <<=, >>= , &=, ^= , |=
 Relational :- ==, >=, <=, !=,  >,  <
 Logical    :- &&, ||,  !, 
 BitWise    :-  &,  |, 	^, 	~, <<, >>, >>	
 Comma      :- int a, c = 5, d;
 Other      :- ?: Ternary  |  & Reference  |  * Dereference  |  -> Member selection  | . dot  |  * Pointer
 sizeof()   :- Return size of data (constants, variables, array) | Format Specifier %zu print value
 Unary      :- Works with single operand  |  ++, -- 



Input / Output(I/O) :-
 - Treat all devices as files
 - File pointer access file for reading and writing purpose
 - Format specify display value %s, %d, %c, %f, etc.. 
 Library :- Standard input	- stdin	 |  Standard output	- stdout  |  Standard error	 -  stderr	  

 Input / Output :-
  - printf() from stdio.h library used for display output on screen 
  - To print variable value use format specifier 
  - scanf() function read formatted input from standard input such as keyboard
  Ex :- 
   #include <stdio.h>
   int main()
   {
    int testInteger;
    float num1;
    double num2;
    char chr;
    scanf("%d", &testInteger);               // &testInteger get address of testInteger user value stored in address
    scanf("%f %lf %c", &num1 , &num2, &chr); // Multi-input from single line
    printf("%d %f\n  %lf\n %c", testInteger, num1, num2, chr); // Character not stored instead ASCII value stored
    return 0;
   }              


 getchar() / putchar() :-
  - getchar() read next character from screen and return it as integer
  - int putchar(int c) put passed character on screen and return same character
  - getchar() read only single character at time while putchar() puts only single character at  time
 
  Ex :-
    int c;
    printf( "Enter a value :");
    c = getchar( );
    printf( "\nYou entered: ");
    putchar( c ); 
  Output :-
    Enter a value : this is test
    You entered: t  


 gets() and puts() :-
  - Read line from stdin into buffer pointed by s until terminating newline or EOF(End of File)
  - int puts(const char *s) function write string 's' and 'a' trailing newline to stdout
  Ex :-
    char str[100];
    printf("Enter a value :");
    gets(str);
    printf("\nYou entered: ");
    puts(str);
  Output :-
    Enter value : this is test
    You entered : this is test



Control Flow (Condition | Loop | Statement | Switch Case):- 

 Condition  :-
  If               :- if(expression){ //True code  }
  if...else        :- if(expression){ //True code  } else { //False code }
  if else ledder   :- if(expression){ //code } else if(expression){ //code } else { //False code}
  Nested If.. else :- if(expression){ if(expression){ //True code } else { //False code } } else{ //False code }
  Ternary          :- Expression ? True Code : False Code;     


 Loop :- 
  For Loop   :- for(Initalization; Condition; Increment/Decrement){ //code }
  While Loop :- while(expression){ //code  // Increment/Decrement } 
  Do..While  :- do { //code // Increment/Decrement }while(expression)   // Run at least one time
  for( ; ; ) :- Infinite loop if condition not false  


 Statement :-
  Break    :- Terminate loop immediately 
  Continue :- Skips current iteration of loop and continues with next iteration

  goto :- 
   - Transfer Program control to specified label
   - label identify When goto statement encountered 
   - Control of program jump to label: and starts executing code
   Syntax :- 
    goto label;
    label:
    statement;  
            
         
 Switch Case :-
  - Expression used must have integral or enumerated type
  - Expression is evaluated once and compared with values of each case label
  - If match corresponding statement executed otherwise default statements executed
  - Default statement is optional
  
  switch(expression){
    case constant N:
    // Statement   
    break; 
              
    default:
    // Statement
  } 



Function :-
 - Block of code that perform specific task
 - Function declaration tells compiler about function name, return type and parameters
 - function definition provide actual function body
 
 Syntax :-
  return_type function_name(Parameter list){
    // function body
  }
 function_name(Parameter)   // Call function 

 Function Call by Value     :- Passing argument value
 Function Call by Reference :- Passing argument address
 Function Call by Pointer   :- void swap(int *x, int *y){}  |  swap(&a, &b);
 Default argument           :- Specify default value for parameters
  int sum(int a, int b = 20) {}
  sum(a);


 Recursion :- 
  void recursion() {
    recursion();      /* function calls itself */
  }


 Variable Arguments :- 
  - Accept variable number of parameter based on requirement
  - stdarg.h header file provide function and macros to implement functionality of variable argument
  int func(int, ... ) {}
  int main() {
    func(1, 2, 3);
  }


 Command-line Arguments :-
  - Pass value from command line using main() function argument 
  - argc refer number of argument and argv[] pointer array which point to each argument passed to program

  int main(int argc, char *argv[] )  {
    if(argc == 2) {
      printf("Argument supplied is %s\n", argv[1]);
    }
  }
  - argv[0] hold program name itself | argv[1] pointer to first command line argument
  - *argv[n] is last argument 
  - If No argument supplied argc will be one and if pass one argument then argc set 2
  
  Output :-
   - $./a.out "testing1 testing2" // Command-line argument
   - The argument supplied is testing1 testing2
   


Array :-
 - Store same type data in contiguous manner in fixed-size memory location
 - Array element accessible via its index => [0]
 - If element is greater than array size ArrayIndexOutOfBoundsException Throw
 Syntax :- type array_name[arraysize];    // Size must be Integer
 
 Example :- 
  int arr[10];                 // One-Dimensional array
  int arr[3] = {1,2,3};        // Initializing array 
  arr[2] = 2;                  // Initializing array with specified index
  int access_arr = arr[1];     // Access array element 
  
  int multi_arr[5][10];        // Two-Dimensional array - [Row][Column]
  int multi_arr[5][10] = {1,2,3,4,5};
  int val = multi_arr[2][5];   // Access array element
  int multi_arr[5][10][4]      // Multi-Dimensional array - [Row][Column][Dimension]


 Passing Array as Function Arguments :- void myFunc(int *param)  |  (int param[10])  |  (int param[])
 Return Array From Function          :- int * myFunc()     
 
 Pointer to array :-  
  double *p;           // Declare Pointer  
  double balance[10];  // Declare array
  p = balance;         // Pass Array to Pointer
  //balance is pointer to &balance[0], is the address of first element of array balance



Pointer :-
 - Every variable has location and every location has its address which accessed using ampersand(&) Operator
 - Pointer variable value is address of another variable
 - * asterisk sign used to declare variable as pointer
 Syntax :- type *variable_name;
 
 Example :- 
  int var = 10;
  int *ip; or int *ip = NULL; // Null pointer 0 value
  ip = &var; 
  cout << "Value of *ip variable: " << *ip << endl; // 10 - Print  | &var or only var print variable address


 Array of Pointer :- 
  int *ptr[variable] or int *ptr[10,20,30]
  ptr[i] = &var[i]
  *ptr[i] or ptr[i] 


 Pointer to Pointer :-
  - First pointer store address of second pointer and second pointer store address of variable
  Example :-
   int var = 30;
   int *ptr;
   int **pptr;
   ptr = &var;
   pptr = &ptr;  


 Passing Pointer to Function :-
  getSeconds(&sec);     // Declare function parameter as pointer type
  void getSeconds(unsigned long *par) {
    *par = time(NULL); 
    return;
  }

  //Function which accept pointer also accept array
  int balance[5] = {1000, 2, 3, 17, 50};
  getAverage(balance, 5);
   
  double getAverage(int *arr, int size) {
    int i, sum = 0;       
    double avg;           
    for(i = 0; i < size; ++i){sum += arr[i];}
    avg = (double)sum / size;
    return avg;
  }  

 
 Return Pointer from function :-
  int * myFunction() {
  }  



String :-
 - One-dimensional array of characters terminated by null character '\0'   
 Ex :- 
  char greeting[6] = {'H', 'e', 'l', 'l', 'o', '\0'};
  printf("Greeting message: %s\n", greeting );

 Method :-
  strcpy(s1,s2) | strcat(s1,s2) | strlen(s1) | strcmp(s1,s2) 
  strchr(s1,ch) :- Return pointer to first occurrence of character ch in string s1
  strstr(s1,s2) :- Returns pointer to first occurrence of string s2 in string s1



Structure :-
 - Combine different types of data items to represent record
 - struct keyword use and each member definition is normal variable definition, such as int 
 - Before final semicolon, Specify one or more structure variables but it is optional
 - Functions not allowed inside struct in C
 - Size of struct = Size of its individual variables (2 integer size is 4 + 4  = 8bytes total)

 Declare Structure :-
  struct [structure name] {
   member definition;
   member definition;
  }[one or more structure variables];  
 

 Example :-
  struct Books {
   char  title[50];
   int   book_id;
  } book;  
  struct Books Book1;
  strcpy(Book1.title, "C Programming");       // To access structure member use member access operator (.)
  printf("Book 1 title : %s\n", Book1.title);


 Structure as Function Argument :-
  void printBook(struct Books book){
    printf( "Book title : %s\n", book.title);
  }


 Pointer to Structure :-
  struct Books *struct_pointer; 
  struct_pointer = &Book1;     // Store address of structure variable in above defined pointer variable
  struct_pointer->title;       // To access members of structure using pointer

  void printBook( struct Books *book ){
    printf( "Book title : %s\n", book->title) 
  }



Union :-
 - Store different data types in same memory location
 - Declare Union with many member but only one member contain value at given time 
 - Size of Union equal to size of largest variable that part of it

 Syntax :- 
  union [union tag] {
    member definition;
  }[one or more union variables];

 Example :-
  union Data {
    int i;
    float f;
    char str[20];
  } data;   
    
 Access :-  
  union Data data;        
  printf( "Memory size occupied by data : %d\n", sizeof(data));
  data.i = 10;
  printf( "data.i : %d\n", data.i);

 

Storage Classes :- 
 - Scope (visibility) and life-time of variables or function within C++ Program 

 auto :- Default storage class for all local variables | Ex :- auto int month;
  
 register :-
  - Local variables that stored in register instead of RAM 
  - Maximum size equal to register size(One word) and can't applied unary '&' operator to it as it no memory location
  Ex :- register int miles;   

 static :-
  - Existence life-time of program
  - Scope restricted to file in which it declared
  - Static used on class data member it causes only one copy of that member shared by all object of its class
  Ex :- static int count = 10;

 extern :- 
  - Give reference of global variable that visible to ALL program files
  - Used to declare global variable or function in another file
  Ex :- extern int count;

 mutable :-
  - Apply only to class objects and allow member object to override const member function
  - mutable member modified by const member function



typedef :-
 - Give data-type new name
 Syntax :- 
  typedef unsigned char BYTE;
  BYTE  b1, b2;  // BYTE used as abbreviation for type unsigned char
 
 typedef vs #define :-
  - typedef limited to giving symbolic names to types only 
  - #define used to alias for all values as well
  - typedef interpretation performed by compiler where #define processed by pre-processor
 


File I/O :-
 - File represent sequence of bytes
  
 Opening file :-
  - fopen() create new file or open existing file
  - Initialize FILE type object contain all necessary information to control stream
  
  Syntax :- FILE *fopen(const char * filename, const char * mode);

  Access mode :-
    r - Open existing file for reading 
    w - Open existing file for writing, if not existing create one 
    a - Open text file for writing in appending mode, if not existing create
    r+ - for both reading and writing
    w+ - for both reading and writing, first truncate file to zero length if exist otherwise create file 
    a+ - for both reading and writing, reading will start from beginning but writing only be appended
   
  For binary files :- rb, wb, r+b, ab, rb+, wb+, w+b, ab+, a+b


 Closing file :-    
  - fclose() return zero on success, releases memory or EOF if there is an error in closing file
  - EOF constant defined in header file stdio.h
  Syntax :- int fclose( FILE *fp );

 
 Writing file :-
  - fputc() return written character on success otherwise EOF if error
  - fputs() return non-negative value on success otherwise EOF returned in case of any error 
  - fprintf() write string into file  
  Example :- 
    FILE *fp;
    fp = fopen("/tmp/test.txt", "w+");
    fprintf(fp, "This is testing for fprintf...\n");
    fputs("This is testing for fputs...\n", fp);
    fclose(fp);
  

 Reading File :-
  - fgetc() read character from input file and return value is character read, error return EOF
  - fgets() read up to n-1 character from input stream referenced by fp
  Syntax :- char *fgets(char *buf, int n, FILE *fp);



Pre-Processor | Header File :-
 - Not part of compiler but separate step in compilation process
 - All preprocessor command begin with hash symbol (#)
  
 Types of PreProcessor :-
  #define  - Substitute preprocessor macro
  #include - Insert particular header from another file
  #undef   - Undefine preprocessor macro
  #ifdef   - Return true if macro is defined
  #ifndef  - Return true if macro is not defined
  #if      - Test if compile time condition is true for
  #else    - alternative for #if
  #elif    - #else and #if in one statement
  #endif   - End preprocessor conditional
  #error   - Print error message on stderr
  #pragma  - Issue special command to compiler using standardized method
 
  Example :-
   #include <stdio.h>     // Add System Library
   #include "myheader.h"  // Add Local Library


 Predefined Macros :- ANSI C defines number of macros
  __DATE__ - Current date as character literal in "MMM DD YYYY" format
  __TIME__ - Current time as character literal in "HH:MM:SS" format
  __FILE__ - Contain current filename as string literal
  
  Example :- 
    printf("File :%s\n", __FILE__ );
    Output :- File :test.c


 Preprocessor Operator :-
  Macro Continuation (\) :- Confined single line, used to continue macro that is too long for single line
  Stringize (#)          :- Used within macro definition, convert macro parameter into string constant
  Token Pasting (##)     :- Combine two arguments, Permit two separate token in macro definition join intosingle token
  Defined()              :- Used in constant expression to determine if identifier is defined using #define

 
 Header File :- 
  - File with .h extension contain C function declaration and macro definition shared between several source file
  Types  :- System files            |  User-defined files
  Syntax :- #include <System-file>  |  #include "User-file"



Error Handling :-
 - Return -1 or NULL in case of any error and set an error code errno
 - Find various error codes defined in <error.h> header file
 - Value of 0 indicates that no error in program
 - stderr file stream to output all error

 errno(), perror() and strerror()
  - perror() display string :, then textual representation of current errno value
  - strerror() return pointer to textual representation of current errno value
  - EXIT_SUCCESS - 0
  - EXIT_FAILURE defined as -1



Memory Management :- <stdlib.h>
 free()    - Release block of memory block specified by address
 calloc()  - Allocate array of num element each of size in bytes | Allocate memory Dynamically
 malloc()  - Allocate array of num bytes and leave them uninitialized
 realloc() - re-allocate memory extending it upto newsize | Increase or decrease size of allocated memory
 Allocation Dynamically :- char name[100]; | don't know size :- char *description;

 Resizing and Releasing Memory :-
  - OS automatically release all allocate memory but also free() also used
  - delete keyword used to free memory from pointer allocated using new keyword
  
