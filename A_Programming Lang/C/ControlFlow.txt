Condition  :-
 If               :- if(expression){  //True code  }
 if...else        :- if(expression){  //True code  } else { //False code }
 if else ledder   :- if(expression){ //code } else if(expression){ //code } else { //False code}
 Nested If.. else :- if(expression){ if(expression){ //True code } else { //False code } } else{ //False code }
 Ternary          :- Condition ? True Code : False Code;     


Loop :- 
 - Repeat block of code until specified condition is not false

 For Loop   :-  for(Initalization; Condition; Increment/Decrement){ //code }
 While Loop :-  while(expression){ //code  // Increment/Decrement } 
 Do..While  :-  do { //code // Increment/Decrement }while(expression)
  - Loop run at least one time in program
  


Statement :-
 Break    :- Terminate loop immediately 
 Continue :- Skips current iteration of loop and continues with next iteration
 
 goto     :- 
  - Transfer Program control to specified label
  - label is identifier When goto statement is encountered, 
  - Control of program jumps to label: and starts executing code
   Syntax :- 
    goto label;
    label:
    statement;  
            
         

Switch Case :-
 - Allow variable to be tested against list of values
 - Expression used in switch statement must have an integral or enumerated type
 - expression is evaluated once and compared with values of each case label
 - If there is match, corresponding statements after matching label are executed otherwise default statements executed
 - Default statement is optional

 Syntax :- 
    switch(expression){
     case constant1:
        // Statement   
        break; 
                
     case constant2:
        // Statement   
        break; 

     default:
        // Statement
    } 