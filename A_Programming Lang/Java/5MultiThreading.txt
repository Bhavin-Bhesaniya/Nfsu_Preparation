What is Thread ?
 - Sequence of execution within process(lightweight process)
 - Not have its own address space but use memory and other resources of process in which it executes
 - Required less resources than process and may be several threads in one process
 - Jvm manage these and schedule them for execution
 - java.lang package allow to create and manage threads

 Lifecycle of thread :- new --> ready  --> running  --> waiting  --> dead 
  - New state immediately after it is created and transition to ready state after it is started
  - Moves to running state when jvm select it for execution
  - If thread complete its execution, it transition to dead state
  - If it choose to sleep, wait or perform I/O operation, it changes to waiting state
  - Each thread has separate instance 

 Syntax of thread :-
  ThreadClass tx = new ThreadClass(); 
  tx.start();
  
 // Another way to create thread :- Declare class that implements runnable interface which declares only run method
  class runnableThread implements Runnable{
    public void run() {
      //code
    }
  }
  runnableThread ry = new Runnable(); 
  Thready ty = new Thready(ry);       //provide runnable interface object to constructor
  ty.start(); 
  Note :- ThreadClass extends class Thread

 
 Constructor in Thread      :- Thread()     | Thread(Runnable r) | Thread(String s) | Thread(Runnable r,String s)
 Specify priority of thread :- MAX_PRIORITY | MIN_PRIORITY       | NORM_PRIORITY 



Thread Method :-
  start()   :- Start thread exectution, once start method called that invoke run method
  run()     :- Contain thread logic, create other object or even initiate other thread
  sleep()   :- Current thread to wait for milisec or nanosec
  isAlive() :- Return true if thread alive otherwise false means thread not alive
  join()    :- throws InterruptedException, Cause caller to wait until thread died
  getName() :- Return name of thread
  setName() :- Set name of thread 
  setPriority()   :- Set priority of thread
  getPriority()   :- Return priority of thread
  yield()         :- current thread to yield control of processor to other thread
  toString()      :- Return string equivalent of thread
  currentThread() :- Return reference to current thread



Synchronization in Thread :-
 - Capability to control access of multiple threads to any shared resource
 - Synchronization is done by using the synchronized keyword as modifier in method declaration
 - Thread executing begin synchronized instance method, it automatically acquire lock on that object
 - Lock automatically released when method complete
 - Only one thread may have this lock at any time
 - Therefore only one thread may execute any of synchronized instance method of an object at particular time
 - When thread begin executing synchronized static method, it automatically acquire lock on associated
   Class object(one thread at one time)

 Syntax :- 
  synchronized(obj) {
    //Statement block
  }

 Note :- 
  - obj is object to be locked
  - Wish to protect instance data you should lock against that object for class data lock appropriate Class object


 
Deadlock in thread :-
 - Deadlock Occure when multiple threads wait indefinitely for each other to relinquish lock
 - Unfortunately, Many deadlock error occur only when threads are scheduled in certain sequence
 - For deadlock prevention assign precedence to all lockable objects and never acquire locks out of sequence


 
Thread Communication :-
 - Thread release temporary lock so other threads have opportunity to execute synchronized method or statement block
 - Thread class object defined three method for thread communication with each other

 Methods :- 
  wait() :-
   - Allow thread which is executing synchronized block on that object to release lock and wait for notification
     from another thread
   - throws InterruptedException

  Notify() :-
   - Notify other thread that is waiting for lock on this object 
   - If several threads waiting, only one of these thread is selected
    
  NotifyAll() :- Notify all thread that are waiting for lock on this object  
  
  Note :-
   - When thread is execute notify and notifyAll does not relinquish its lock at that moment
   - This occur only when synchronized method or statement block
   - Effect that notify and notifyAll method is that one thread resume its execution for synchronized block
   - It return from wait() method and continue executing next statement
   - because this method implements by object they all inherited from classes