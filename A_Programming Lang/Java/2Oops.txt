OOP (Object Oriented Programming):-
 - All about creating object that contain both data and method

 Adavantage :-
  - Faster and easier to maintain, modify, debug
  - Provide clear structure
  - Keep code DRY(DO NOT REPEAT) means reducing repetition of code
  - Full resuable app with less code and shorter develpoment time

 Field in OOP :-
  Class        |  Object         |  Method       | Instance     |  Message Passing  
  Inheritance  |  Polymorphisam  |  Encapsulate  |  Abstraction

 
 Object :-
  - Instance of class which has state and behavior
  - new keyword used to create object 
  - You can create multiple object of same class
  Ex :- ClassName objectname = new ClassName();
 


 Class :-
  - Class is blueprint of object 
  - Variable in class know as attribute and Method as behavior
  Access attribute :- Object.Attribute
  Modify attribute :- Object.Attribute = new value () // If final keyword use can't modify value
  Declare method in class :- static or non-static datatype methodname(){}
  Access static method     :- methodname();
  Access Non-static method :- objectofclass.methodname();



 Types of variables in OOP :-
  Local variable :-
   - Declared and initialized within method and destroyed when method is completed work
   - Cannot be able to used access modifiers

  Instance variable :-
   - Declared within class but outside class method
   - Access inside any method, constructor or block of that particular class
   - Default is access specifier by default (Recommended make is private) 
   - Access by creating object / Accessed directly by calling variable name inside class
   - Each object have own copy  
   - Change in one variable can't affect other

  Class variable :-
   - Declared using static keyword inside class but outside class method  
   - Stored in static memory that Created when program start and destroyed when program stop
   - Assign value during declartion or within constructor(In spcial static initializer block)
   Access :- classname.Variablename
   - One copy only for all object  
   - Change in one variable affect all
   - When declared public static final then variables name(constant) are all in uppercase



 Construtor :-
  - Each time new object is created at least one constructor is invoked
  - Used to initialize object
  - All class have one construtor by default if you not create 
  - It take paramter that used to initialize attribute
                
  Rules :-
   - Not have return type  
   - One class has more than one constructor
   - Not required invoke explicitly because its automatically invoked at instantiation 
   - Constructor name is same as class name
   - We can use access modifiers with constructor 
   - It can be overloaded but not inherited
   - First statement in constructor must call to this() or super()

 

 Method :-
  - Collection of statement that are grouped together to perform operation(like function)
  Syntax :- Modifier returnType methodName (parameter){}
  Ex     :- public static int valueAge(int age){}
   static - Method belong to class and not to an object of the class

  Recursion :- 
   - Function call itself 
   - Used to break complicated problem into simple problem that easier to solve 
   - Every Recursive have halting condition, where function stop call iteself
        
  this :-
   - Used as reference for object of the current class
   - It refer members of class such as constructors, variables and method
   - Differentiate instance variables from local variables if they have same names, within constructor or method
   - Call parametrized constructor or default from class in class
   - Also known as explicit constructor invocation
   Note :- Used only within instance methods or constructors

  Variable Arguments(var-args) :-
   - Pass no. of same type arguments to the method
   Syntax :- typeName... parameterName

  finalize :-
   - Method that called just before object's final destruction by garbage collector
   - Ensure that object terminates cleanly
   - Java runtime calls that method
   - Inside finalize( ) method, you specify those actions that must be performed before object is destroyed
   Syntax :- accessmodifier returnsType finalize(){}



 Inheritance :-
  - Inherit attributes and methods from one class to another
  - Two classes -> 
    1)superclass(parent) - being inherited from
    2)subclass(child)    - class that inherits from another class
  - Extends keyword is used for inheritance
  - Useful for code reusability :- reuse attributes and methods of an existing class



 Polymorphisam :-
  - "Many form" and it occurs when we have many classes that are related to each other by inheritance
  - polymorphisam use inheritad methods to perform different tasks
  - Allow to perform single actions in different ways



 Encapsulation :- 
  - Hide sensitive data from user so increased security of data
  - binding data and method into single unit
  - Better control of class attribute and methods
  - class-attributes can be read-only(use only get) or write-only(only use set) 
  - flexible without affecting other parts
   
  How to achieve :-
   - declare class variable/attributes as private
   - get and set method to access and update value of private variable
    
  Get/Set Method :- 
   - Return variable value, set method set value
   Ex :- getVariableName() / setVariableName()


 Access modifiers :-
  - Set access levels for classes, variables, method and constructor
  public  :- 
   - Accesible by any other class, different package
  
  default :- 
   - Only accessible by class in the same package
   - Not required explicitly declare
   - Used when not specfiy any modifiers
   - Variable or method declared without any access control modifier is available to any other class in the same package. 
   - Method in interface are by default public

  private :- 
   - Only accessible within declared class
   - Class and interfaces cannot be private
   - Variable that declared private can accessed outside class, if public getter methods are present in class
   - Object encapsulate itself and hides data from outside world (using this keyword)
   - Make variable available use getFormat() and setFormat() methods

  protected :- 
   - Accessible within same package and subclasses
   - Cannot be applied to class and interfaces
   - Method and fields in interface cannot be declared protected
          
  
  Access Control :-
   - Method declared public in superclass also must be public in all subclasses
   - Method declared protected in superclass must either be protected or public in subclasses, they cannot be private
   - Method declared private are not inherited at all, so there is no rule for them
        


 Non-Access Modifier :-
  final :- 
   - Cannot inherit by other class or in variable declare than value can't change
   
   Final Variable :-
    - Make constant class variable
    - Explicitly initialized only once
    - Data within object can be changed but not reference
    - Reference variable declared final can never be re-assigned to different object

   Final Methods :-
    - Cannot be overloaded by any subclasses
    - Main method use content of the method and should not be changed by any outsider method
 
   Final Class :-
    - No other class can inherit any feature from final class

  
  static :- 
   - Attribute and method belongs to class rather than object

   Static Variable :-
    - Exist independently of any instances created for class
    - Only one copy of static variable exists
    - Local variables cannot be declared static

   Static Method :-
    - Not use any instance variables of any object of the class they are defined in
    - It takes all data from parameter
    - Access using class name followed by dot and name of variable or method


  abstract  :- 
   - Used by subclass, only be used for method,not have a body,body provided by subclass
   
   Abstract Methods :-
    - Method declared without its body
    - Body provided by subclass 
    - Abstract method can never be final or strict
    - Class that extends abstract class must implement all abstract methods of super class, 
      unless subclass is also abstract class
    - one or more abstract methods then class must be declared abstract
    - abstract class does not need to contain abstract method



  transient :- 
   - Attribute and method are skipper when serializing object containing them
   - Indicate JVM to skip particular variable when serializing object containing it
   - Included in the statement that creates variable, preceding class or data type of variable
  
  synchronized :- 
   - Method accessible by one thread at time
   - Applied with any of four access level modifiers

  volatile  :- 
   - Not cached thread-locally and always read from "main memory"
   - Tells JVM thread accessing variable must always merge its own private copy of variable with master copy in memory
   - Accessing volatile variable that synchronizes all cached copied of the variables in main memory
   - Volatile applied to instance variables which type is object or private
   - Volatile object reference can be null


 
 Abstract Class and Method :- 
  - Process of hiding certain details and showing only essential information to the user
  - Use to achieve security
  abstract class :- 
    - Restricted class that cannot be used to create object(to acces it,must be inherited from another class)
    
  abstract method :- 
    - Only used in abstract class, does not have body
    - body provide by the subclass which inherit it


                       
 Nested Class / inner class :-
  - Class within class
  - Purpose to related group classes together to make code more readable and maintainable
  - To access inner class -> create obj of outer class,than create obj of inner class
  Ex :- outerclass.innerclass innerclassobj = outerclassobj.new innerclass(); 
  
  - Inner class is private or protected, if you don't want outside object access innerclass make it private
  - Static innerclass means you can access it without creating object of outer class
  - Static innerclass not have access to members of outer class
  - Normal innerclass can access attributes and methods of outer class

 

 Interface :- 
  - Complete "Abstract class" that used to group related method with empty bodies   
  - To Access interface method must be "implemented" by another class with implemente keyword(instead of extends)
  - Interface method body provide by implement class
  - It cannot be used to create object
  - To implement interface must override all its methods
  - Interface attribute are by default public, static, final
  - Cannot containing construtor(as it cannot be used to create object)
  - Java not have mulitple-inheritance but it achieve with interface because class implement mulitple interface



 Wrapper Class :-
  - Class whose object wraps or contains primitive data types
  - Wrap primitive value into wrapper class object

  Needs :-
   - Object needed if we wish to modify argument passed into method (because primitive types are passed by value)
   - Data structures in Collection framework such as ArrayList and Vector, store only objects not primitive types
   - Wrapper Object is needed to support synchronization in multithreading

  Type :-  See in Images

  Autoboxing :- 
   - Automatic conversion of primitive types to object of their corresponding wrapper classes is known as autoboxing

  Unboxing :- 
   - Automatically converting object of wrapper class to its corresponding primitive type is known as unboxing

  
