Topics :-
 - Introduction(Basic / Feature / Intro JDK, JRE, JVM / DIFFERNCE BETWEEN JDK,JRE,JVM)
 - Variable
 - Literal
 - Identifier And Keyword
 - DataType
 - Operator
 - Expressions, Statements, Blocks and comment 
 - Control Flow(Condition / Switch / Loops /  Control Statement)
 - Array
 - File Handling
 - I/O Stream
 - Package
 - Data and Time
 - Regex



Introduction :-
 Basic :-
  - Developed by James Goshling at Sunmicrosystem and released in 1995 
  - Why JAVA not fully oop ? -> Support primitive datatype
  - Java has no pointers and all code written in class and object
  - James initialized java project in june 1991 for setTop box
  - Initially language called 'oak'(Tree outside) than 'Green' than 'Java' choose from random word
  - 13 November,2006 sun released much as free and open source software under GPL license
  
  Comment    :- Helps progrmmers to understand code            |  Single line :- //  |  Multi-Line  :- /* */
  Expression :- Consist of variables, operators, literals and method calls
  Statement  :- Each statement is complete unit of execution                 | Ex :- int score = 9*5;
  Blocks     :- Group of statement that enclosed in curly braces { }



 Feature :-
  Object Oriented      :- Everything is object
  Platform independent :- Java byte code interpreted by any machine which has jvm 
  Simple               :- Syntax is easy to learn and master in oop would be more easy language
  Secure               :- Built-in Feature that enables us to develop virus-free systems
  Architecture-Neural  :- Compiled code executable on many processor with java run time 
  Portable             :- Architecture-Neural and no implementation dependent makes java portable 
  Robust               :- Java eliminated error during compile time or runtime which maintains workflows 
  Multi-thread         :- Perform many task simultaneously , lightweight Process
  High-performance     :- Using Just-In-Time Compiler enables performance
  Dynamic              :- Carry runtime information that used to verify and resolve access to objects on runtime
  WORA(Write once run anywhere) 



 Naming Convention Rules :-
  method 		 :- getRequest  // First character is small each internal word is capitalized
  constant	 :- MAX_VALUE   // All letters are uppercase 
  Variable   :- int a = 10;	// No whitespace, symbols and start with digit //Allow underscore and $ at start of variable 
  package    :- java.io.*;	// all package names in lowercase	
  class/interface :-Topcapital //First character is capital



 Intro JDK, JRE, JVM :-
  What is JDK(Java Development Kit)?
   - JDK is software development kit required to develop applications in Java
 
  What is JVM(Java Virtual Machine)?
   - Acts as a runtime engine to run java application and call main method
   - Since JVM â€‹executes Java bytecode which is platform-independent, Java is platform-independent

  What is JRE(Java Runtime Environment)?
   - JRE is software package that provide Java class libraries, JVM and other components that required to run Java code 

  JDK = JRE + DEVELOPMENT TOOLS  (PLATFORM INDEPENDENT)
  JRE = JVM + LIBRARY CLASS 	(JVM PLATFORM DEPENDENT)
 
  Basic Jvm Working Cycle :-
    .java -> javac ->.class(same class name) with bytecode(run any machine) -> jvm -> machine code 
 
  
  Jvm Components Helps to Run Java :-
   JVM ClassLoader:- Responsible for Loading, Linking, Initalization

			       			 req							req
	 System class loader ---> extension class loader --->bootstrap class loader --> If class found bootstrap path class loaded otherwise  
        |         														|
       	|	 extension move to system class loader ---<- <- Move Back to the extension class loader 
		(if system class loader fail load at starting)		path not found move to extension class
			|
		error : java.lang.ClassNotFoundException


   JVM MEMORY :-
    Methodarea  :- All class level information are stored like classname,variable,method etc 
    HeapArea    :- Information of all object is stored per jvm has one Heap area and it is a shared resource
    Stackarea   :- For every thread jvm create run-time stack which is stored hear
    PcRegister  :- Store current execution instruction of thread and each thrad have separate registers
    NativeMethodStack :- For every thread it's created that store thread native information
 

   EXECUTE ENGINE :-
    - Execute ".class"(bytecode) 
    - Read bytecode linebyline and use data and information present in various memory area and execute instrution
    Interpreter:- Interpretes bytecode line by line and executes 
    JIT(JUSTINTIME)  :- Compiles entire bytecode and convert into native code so whenever interpreter call method 
                        repeated jit provide direct native code for that part
    GarbageCollector :- It destroys un-referenced objects / free heap memory by destroying unreachable object 


   JAVA NATIVE INTERFACE (JNI):-
    - Interacts with native method libraries and provide native libraries(c/c++)required for execution 
    - Enable jvm to calls native libraries (c/c++)
 
   JVM STACK AREA :-
    - Every thread jvm create separate stack at the time of creation thread creation 
    - Perform 2 Operations :- pushes and pops the stack
    - Stack for particular thread may be termed as run-time stack
    - After all methods call stack empty and it becomes destroyed just before thread terminate
    - Each entry in the stack is called StackFrame or ActivationRecord

   JVM SHUTDOWNHOOK :-	
    - Special construct that allows developers to plug in piece of code to be executed when JVM is shutting down
    - Runtime.getRuntime().addShutdownHook(Thread) method

   JAVACLASS FILE :- Containing javabytecode and .classs extension that enable to run in jvm
    


 DIFFERNCE BETWEEN JDK,JRE,JVM :-
  JDK :- Used to create java application conatin jre, interpreter/loader, javac, archiver(jar), javadoc and other tool
  JRE :- JAVA RTE(RUNTIME ENVIROMENT) Provide minimum requirement for executing java application
  JVM :- Runtime instance when write java command on command prompt to run java class, an instance jvm is created

  DIFFERNCE :- 
  - Jdk provide develop and execute java program/ include development tool , jre 
  - JRE provide package to run program not develop 
  - JVM is inbuilt in both/when run program from jdk or jre jvm exectue line by line program known as interpreter

  HOW JRE WORKS :-
   .java -> .class    -> classloader/bytecode verifier -> interpreter -> runtime -> hardware	
	          \-/
		LOAD FROM HARDDISK,NETWORK OR OTHER RESOURCES
    compile       -> RUNTIME

  Interaction between jdk and jre :-
								/ JRE 
  javasourcecode -> jdk(java compiler) ->java bytecode -> ( jvm (jit) ) 
							(Hardware platform)



Variable :-
 - Variable is location in memory (storage area) to hold data
 - To indicate storage area, each variable should be given unique name (identifier)

 Declaration Rules :-
  - Start with letters, _ , $
  - Not start with number
  - Not allows whitespace and special Symbols

 Types :-
  Local Variables   - Declared inside method                     
  Class Variables    (Static Fields)     - Declared inside class but outside method with static keyword
  Instance Variables (Non-Static Fields) - Declared inside class but outside method

 Note :- 
  - Java is statically-typed language so all variables must be declared before they used
  - We cannot change data type of variable in Java within same scope

 Null :-
  - Null is not object or neither a type it is special value
  - Every reference variable in java has by default value is null / case-sensitive

 Note :- Example in A1VariableDataType.java file



Literal :-
 - Represent Fixed Value(Declare variables with values)

 Types :-
  Boolean - True or False
  Integer - Without any fractional part or exponation part(binary(0b),decimal(27),octal(027),Hexadecimal(0x27)) 
  Float   - float(3.4f) , double(3.3445e2)
  String  - Sequence of character enclosed inside double-quotes("Java")
  Character - unicode character enclosed inside single quotes('a') 
  Escape sequences :- (\n,\b,\r,\t,\\,\',\'")
    


Identifier And Keyword :-
 - Identifiers are the name given to variables, classes, methods, etc..

 Rules :-
  - Case-sensitive and not used keyword
  - Start with letters, _ , $
  - Not start with number
  - Not allows whitespace and special Symbols

 Keyword :-
  - Predefined, reserved words that cannot used as identifier that have special meanings for compiler

  Keywords List :-
  int   void    byte    char   boolean double  short  long   final     const    enum
  if    else    for     while   do      goto   return  break  continue  default
  try   catch	  assert  throw	 throws
  case  switch  this	
  class    new      static      private	  protected	  public
  import   package  implements  interface extends
  abstract finally	instanceof  strictfp	super       
  transient	synchronized  volatile  native



DataType :-
 - Specify type of data that stored inside variables in Java
 - Default value of primitive datatype is 0 and user-defined type is null
 
 Primitive datatype :- Predefined by language and named by keyword 
  DataType   Range of bytes            Sizebyte      Ex
  byte       -128 to 127                1      B1 = 100;   
  short      -32768 to 32767            2      B2 = 20; 
  int        -2,147,483,648 to 7        4      B3 = 20;
  float      6 to 7 decimal             4      B5 = 3.3f;
  double     15 decimal                 8      B6 = 7.44d;
  long       -9,223,372,036,854,775,808 to 7 8 B4 = 45L;
  boolean    true or false              1bit   B7 = false;
  char                                  2      B8 = 'F';


 Non-Primitive type :- 
  - Reference variable that created using constructor of classes to access object
  - Declared for specific type so value can't Change
  - Default value is null
  - No fixed size
  Ex :- String, Array, Class, Object


 Type Casting :-
  - Method or process that converts datatype into another datatype in both ways manually and automatically
  - Automatic conversion done by compiler and manual conversion performed by programmer

  Widening casting(automatically) :- Convert smaller type to larger type
   Ex :- byte -> short -> char -> int -> long -> float -> double 

  Narrowing casting(Manually) :- Convert larger type to smaller type
   Ex :- double -> float -> long -> int -> char -> short -> byte



Operator :-
 - Symbol that perform operation on variables and values
 Arithmatic :- + , - , * , / , %   
 Assignment :- = , += , -= , *= , /= , %= , &= , |= , ^= , >>= , <<=
 Realtional :- == , != , > , <  , >= , <=
 Logical    :- && , || , !
 Unary      :- -, +, ++ , -- , !(Logical Complement Operator):inverts the value of a boolean
 Ternary    :- Condition ? If(true) : If(false) 
 Bitwise    :- &, |, ^(XOR), ~(Complement Operator), << , >> , >>>(unsigned)
 instanceOf :- Check type if object is instance of class, subclass or interface(result =str instanceof String)

 Operators Precedence :-
  Category	            Operator	                          Associativity
    Postfix	           () [] - > . ++ --	                  Left to right
    Unary	            + - ! ~ ++ - - (type)* & sizeof	      Right to left
    Multiplicative	    * / %	                              Left to right
    Additive	        + -	                                  Left to right
    Shift	            << >> >>>	                            Left to right
    Relational	        < > <= >= instanceof	              Left to right
    Equality	        == !=	                                Left to right
    Bitwise AND	        &	                                  Left to right
    Bitwise XOR	        ^	                                  Left to right
    Bitwise OR	        |	                                  Left to right
    Logical AND	        &&	                                Left to right
    Logical OR	        ||      	                          Left to right
    Conditional	        ?:      	                          Right to left
    Assignment	    = += -= *= /= %= ^= |= <<= >>= >>>=	    Right to left



Input/Output :-
 Output :-
  - System is class and out is public static field :- accept user data 
  System.out.print()   - Print string inside quotes 
  System.out.println() - Same work like print but add new line in the end 
  System.out.printf()  - Provide formatting same as c/c++ 

 Input :-
  - System.in take standard input from user
  - Use Scanner class which import from java.util.Scanner 
  Syntax :- Scanner usrInput = new Scanner(System.in);
  usrInput.nextInt(); - Take integer value from user 

 More Method :- 
  - nextFloat(), nextDouble(), nextLong(), nextByte(), nextFloat()
  - next()Read input upto whitespace, does not read newline character in your input created by hitting "Enter"
  - nextLine()read line of text , return after reading that newline
  - Close() method to close object



Control Flow :- 
 Condition :-
  If         :- if(condtion){}
  If..Else.. :- if(condtion){}else{}
  Else-if    :- if(condtion1){}else if(condtion2){}else{}
  Ternary    :- var = (condition) ? expressionTrue : expressionFalse;
 

 Switch :-
  - Expression evaluated once then compared with values of each case statement
  - If match, associated block of code is executed otherwise default block executed
  - No duplicate case statement allowed
  Syntax :- 
    switch(expression)  
    {
      case n:
      //code block
      break;
    
      default:
      //code block
    }


 Loops :- Execute block of code as long as condition true, to save time, reduce errors, make code readable   
  for       :- for (initialization ; condition ; increment/decrement){ //code } 
  while     :- while(condition){ //code }
  do..while :- do{ //code }while(condition)
  foreach   :- for(type variableName : arrayName){ //code }


 Control Statement :- 
  break    :- Terminates loop immediately and control of program moves to next statement 
  continue :- Skip current iteration of loop and go next iteration
  Note :- 
   - Java not support goto but use  "label:" instead of goto
   - Use label break statement to terminate outermost loop as well Ex :- break second: (This is label use)
   - Label declare starting point of loop 



Array :- 
 - Collection of similar types of data
 - Dynamically allocated, Ordered and start index with 0
 - Primitive type -> Stored in contiguous memory location
 - Class objects  -> Stored in heap segment
 - Access element of outside array size -> JVM throws ArrayIndexOutOfBoundsException
 - Superclass of any array -> java.lang.Object
 
 Array Class  :- java.lang.Object -> java.util.Arrays(Java Collection Framework) 
 Final Array  :- Array variable which actually reference to object cannot be changed but member of array modified
 Jagged Array :- Array of arrays such that member array can be of different sizes
 Reflection Array Class :- java.lang.reflect provide static method to dynamically create array | Final class 


 Syntax :- 
  data-type[] variablename;                 // Array reference created
  Variablename = new datatype[arraysize];   // New array with memory location

  dataType[] arrayRefVar = new dataType[arraySize];    // Complete array Declaration
  String[] cars = {"Volvo", "BMW", "Ford", "Mazda"};   // New array with value

  Access Element :- arrayRefVar[indexNo]; Or Loops
  Update Element :- arrayRefVar[indexNo] = new value; 
  Find Length    :- arrayRefVar.length;          
         

 Syntax :- Multi-dimensional array containing one or more array
  int[][] intArray = new int[10][20];         //2D array or matrix
  int[][][] intArray = new int[10][20][10];   //3D array


 Array Class object :-
  - Every array associated Class object that shared with all other array with same component type
  Syntax :- arrayVariable.getClass()  |  arrayVariable.getclass().getSuperclass()


 Exception :-
  Checked   :- Checked at compile time
  Unchecked :- Unchecked at compile time | Error and RuntimeException classes unchecked exception | throwable is checked



FileHandling :- java.io.file package  
 Syntax :- File a = new File(filename/pathforfile);

 Constructor :-
  File(File parent, String child)    |  File(String pathname)           
  File(String parent, String child)  |  File(URI uri)

 Method :-
  boolean canExecute()           : Test application execute file denoted by this abstract pathname
  boolean canRead()              : Test application read file denoted by this abstract pathname
  boolean canWrite()             : Test whether application modify file denoted by this abstract pathname
  boolean createNewFile()        : Automatically create new empty file named by this abstract pathname 
  boolean delete()               : Delete file or directory denoted by this abstract pathname
  boolean exists()               : Test whether file or directory denoted by this abstract pathname exists
  static File createTempFile()   : Create empty file in default temporary-file directory
  int compareTo(File pathname)   : Compare two abstract pathnames lexicographically
  boolean equals(Object obj)     : Test abstract pathname for equality with given object
  long getFreeSpace()            : Return number of unallocated bytes in the partition
  String getName()               : Return name of file or directory denoted by this abstract pathname
  String getParent()             : Return pathname string of this abstract pathnameâ€™s parent
  String getPath()               : Convert pathname into a pathname string
  String getAbsolutePath()       : Return absolute pathname string of this abstract pathname
  File getParentFile()           : Return pathname of this abstract pathnameâ€™s parent
  boolean isDirectory()          : Test file denoted by this pathname is a directory
  boolean isFile()               : Test file denoted by this abstract pathname is a normal file
  boolean isHidden()             : Test file named by this abstract pathname is a hidden file
  long length()                  : Return length of file denoted by this abstract pathname
  String[] list()                : Return array of string naming files and directories in directory
  File[] listFiles()             : Return array of abstract pathname denoting files in directory
  boolean mkdir()                : Create directory named by this abstract pathname
  boolean renameTo(File dest)    : Rename file denoted by this abstract pathname
  boolean setExecutable()        : Set execute permission
  boolean setReadable()          : Set read permission
  boolean setReadable()          : Set everybodyâ€™s read permission
  boolean setReadOnly()          : Mark file or directory named so that only read operations are allowed
  boolean setWritable()          : Convenience method to set ownerâ€™s write permission
  String toString()              : Return pathname string of this abstract pathname
  URI toURI()                    : Construct file URI that represent this abstract pathname



I/O Stream :-
 - Stream method sequentially access file
 - java.io package use for character stream unicode and binary stream non-unicode text
 - Character Stream useful to process text files while ByteStream suitable for processing raw data like binary files
 Type :- InPutStream - Read data from source | OutPutStream - Writing data to destination

 Character Stream :-
  - Allow read/write data characters by character automatically using 16-bit unicode character
  Ex :- FileReader and FileWriter 

 Byte Stream :-
  - Process data bytes by byte sequence(8-bit)
  Ex :- FileInputStream and FileOutputStream
 
 Standard Stream :- Input - System.in  |  Output - System.out  |  Error - System.err

 Hierachy Of Stream :- Object
  InputStream  :- File | ByteArrayInput  | FilterInputStream  - BufferedInput,  DataInputStream   | ObjectInputStream
  OutPutStream :- File | ByteArrayOutPut | FilterOutPutStream - BufferedOutPut, DataOutPutStream  | ObjectOutPutStream



Pacakge :-
 - Group related classes that Avoid name conflict and write better maintainable code
 Type :-  Built-in package (Package from java api)  |  User defined package (Create own package)

 Built-in package :-
  - import package.name.class;  import single class 
  - import package.name.*;      import whole package  

 User defined package :-
  - Java uses file system directory to store them
  - root -> mypack -> filename.java    



Date And Time :-
 - Not have built-in date class but import java.time package to work with data and time api
 - java.util class encapsulates current date and time

 Constructor :-
  Date() :- Initalize date and Time Object 
  Date(long mes) :- Accept argument that equals number of milliseconds

 Calender :-
  - Abstract class cannot be instantiated   |  Syntax :- Calendar cal = Calendar.getInstance();
  - Object of Calendar Class initialized with current date and time in default locale and timezone
  - Use java.util.GregorianCalendar and java.util.Calendar
  - gcal of GregorianCalendar Class initialized with current date and time in default locale and timezone



Regular Expression :-
 - Special sequence of character that match sets of string using special string called pattern
 - java.util.regex

 Pattern Class :- Compile() method return Pattern object that accept regular expression as first argument
 Matcher Class :âˆ’ matcher() Interpret pattern and perform match operation against input string
 PatternSyntaxException :âˆ’  Unchecked exception that indicate syntax error in regular expression pattern
 Capturing Group :- Treat multiple characters as a single unit | Find how many group present in expression groupCount()
 
 Common Symbols :-
  ^	      Beginning of line
  $	      End of line
  .	      Match single character except newline  | m option allow to match newline as well
  [...]	  Match any single character in bracket
  [^...]	Match any single character that not in bracket
  \A	    Beginning of entire string
  \z	    End of entire string
  a | b	  Match either a or b
  \W	    Match nonword characters
  \w	    Match word characters
  \s	    Match whitespace, Equivalent to [\t\n\r\f]
  \S	    Match nonwhitespace
  \d	    Match digits, Equivalent to [0-9]
  \D	    Match nondigit


 Method :-
  Start   :- Return start index of previous match
  End     :- Return offset after last character matched
  find    :- Find next subsequence of input sequence that matches pattern
  matches :- Match entire region against pattern
  lookingAt :- Match input sequence starting at beginning of region against pattern


 Replacements Methods :-
  replaceAll         :- Replace every input subsequence
  replaceFirst       :- Replace first inpuy subsequence
  quoteReplacement   :- Return literal of replacement string or specified string
  Matcher appendReplacement :- Implement non-terminal append-and-replace step
  StringBuffer appendTail   :- terminal


 PatternSyntaxException Class Methods :-
  getIndex       :- Return error index
  getPattern     :- Retrieve erroneous regular expression pattern
  getMessage     :- Return multi-line string containing error
  getDescription :- Return description error message

