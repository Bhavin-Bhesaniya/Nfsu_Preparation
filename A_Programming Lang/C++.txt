Overview :-
 - C++ is middle-level language as it comprises combination of both high-level and low-level language features
 - Developed by Bjarne Stroustrup starting in 1979 at Bell Lab
 - Originally named C with Classes but later it was renamed C++ in 1983
 - C++ is superset of C, any valid c program is valid in c++
 - C++ fully supports object-oriented programming including four pillars of object-oriented development −
   Encapsulation | Data hiding | Inheritance | Polymorphism
 - Statically typed, compiled, general-purpose, case-sensitive, free-form that supports procedural, object-oriented 
   and generic programming
 - Static typing means type checking is performed during compile-time as opposed to run-time
 - C++ Standard Library giving rich set of functions manipulating files, strings
 - Standard Template Library (STL) giving rich set of method manipulating data structures
 - C++ is portable, compilter compile code can run any OS
 - .cpp extension,  GNU C/C++ compiler used to compile code



Basic Syntax | Comment :-
 Ex :-
  #include <iostream>
  using namespace std;
  int main() { /* main() is where program execution begin */
    cout << "Hello World" << endl; /* prints Hello World */
   return 0;
  }

 - C++ semicolon is statement terminator
 - Block is set of logically connected statement that are surrounded by opening and closing braces
 - Comment :- /* */ 
 - endl, which insert new-line character after every line
 - << operator used to pass multiple values out to screen



Identifier :-
 - Identifier is name used to identify variable, function or any other user-defined item
 - C++ is case sensitive
 
 All Identifier List :-   
  CharacterSet       - A-Z,a-z 
  Digit              - 0 to 9     
  Special Character  - 31
  WhiteSpace Character - Blank Space, Horizontal Tab, Carriage Return and Form Feed   

 Rules :-
  - First letter start with either letter(Atoz/a_z) or underscore(_) followed by more letters and digits
  - Cannot start name with digit or any special character at first
  - You cannot use keyword name as identifier
  - C++ does not allow punctuation characters such as @, $, and %
  - Name Must be unique 



Keyword :-
 - Reserved words not be used as constant or variable or any other identifier name
  
  void  short  int    float  char      double   long      bool signed unsigned enum union const sizeof 
  for   while  do     break  continue  goto     switch    case if     else     true false   
  try   catch  throw  return auto      new      register  this    
  class extern static using  namespace volatile delete    struct
  
  private protected public default
  asm     operator explicit   export
  typedef typeid   typename   reinterpret_cast
  friend  virtual  const_cast static_cast dynamic_cast
  inline  wchar_t  mutable    template	



DataType :-
 - Determines type and size of data associated with variables
 - Type of data type determine how much space is occupies in storage
  
 Built-in :-1 byte = 8 bit, 1 kb = 1024 byte, 1mb = 1024kb
  Type    :- Boolean | Character | Integer | Floating point | Double floating point | Valueless | Wide character
  Keyword :- bool    | char      | int     | float          | double                | void      | wchar_t

   Type          Size     Range              Format Specifier    Example 
   char	         1 byte	−128 to 127         %c                  char test = 'B';
   short	     2 byte	−32,768 to 32,767                       short a = 10;
   int	         4 byte	−32,768 to 32,767   %d, %i              int id  = 0;            |  -5, 10;
   float	     4 byte                     %f                  float no = 22.442e2;    
   double	     8 byte                     %lf                 double no = 22.442e2;
   wchar_t       2 or 4 1 wide character
   long int      8 byte                     %ld, %li            long a;
   long double	 12 byte                    %Lf                 long double d;
   unsigned int  4 byte	 0 to 65,535        %u                  unsigned int x = 35;
   short int	 2 byte                     %hd
   unsigned int	                            %u
   long int	     8 byte                     %li
   

 - To Check size of variable use sizeof() operator Ex :- sizeof(variableName);
 - Type modifiers :-
   - Modifiers signed, unsigned, long and short applied to integer base types
   - In addition signed and unsigned applied to char and long applied to double
   - Modifiers signed and unsigned also be used as prefix to long or short modifiers 
    Signed   - Store both positive and negative number
    Unsigned - Store only positive number
    long     -    
    short    -
  
   Example :- 
    unsigned x;         // C++ automatically implices int
    unsigned int y;


 typedef :-
  - create new name for an existing type
  Syntax  :- typedef type newname;
  Example :- typedef int feet;  
             feet distance;

 Enumerated Types :-
  - Declare optional type name and set of zero or more identifiers that used as values of type
  Syntax :- enum enum-name { list of names } var-list; 
  Example :- enum color { red, green = 5, blue } c;
             c = blue;
  - By default value starting from 0 to n-1 but u can specify custom value( blue=2 but green=5 so blue=6)
  


Variable :-
 - Container (storage area) to hold data which identify by its name
 Type  :- int char float bool double void wchar_t
 Other :- Enumeration Pointer Array Reference Classes
 - extern keyword to declare a variable at any place
 - Expression that refer to memory location are called "lvalue" expression
 - rvalue refers to data value that is stored at some address in memory
  
 Ex :- 
  int intValue = 10; // declare variable with int type
  intValue = 10.10;  // Wrong cannot change int to float
  float a,v,c;       // Variablelist with no value
  int g = 10, n = 20;
  
 Scope :-
  - Inside function or block called local variable and outside called global variable
  - Local variable accessed inside function or block only not accessible outside
  - Global variable accessed anywhere in program throughout program 
  - Local variable not initialized by system you must initialize it while global variable initialized automatically
 

 Type Qualifiers in C++ :-
  - type qualifiers provide additional information about variables they precede
  const    - Const Object type cannot be changed by program during execution
  volatile - Tells compiler that variable's value may be changed in ways not explicitly specified by program
  restrict - Pointer qualified by restrict is initially only means by which object it points to can be accessed
           - Only C99 adds new type qualifier called restrict



Constant/Literals :- Representing fixed values
 Ex :-  1, 2.5, 'c' 

 Types Of Literals :-
  Integer :-
   - Numeric literal(Number) without any fractional or exponential part
   - Octal starts with 0 and hexadecimal starts with 0x
     octal       (base 8)  :- 021, 077 
     decimal     (base 10) :- 0, -8, 22
     Hexadecimal (base 16) :- 0x7f, 0x2a

  Floating :- Numeric literal that has either fractional or exponent form
   Ex :- -2.0, 0.00234, -0.22E-5 (E-5 = 10-5)

  Characters :- Single character inside single quotation marks
   Ex :- 'a', 'm', 'F', '2', '}'

  Escape Sequence :- Characters with backslashe which has special meaning
    \b - backspace      | \\ - Backslash              | \0 Null Character
    \f - formfeed       | \' - Single Quotation Mark  | \" - Double Quotation Mark
    \n - newline        | \r - return                 | \? - Quotation Mark    
    \t - Horizontal tab | \v - vertical tab

  String Literals :- Sequence of characters enclosed in double-quote marks 
    Ex :- "String" , "" ,  "    ", "S", 

  Constants :- Variable value cannot be changed once declared
    Ex :- const double PI = 3.14;
          #define LENGTH 10          - preprocessor 

  void :- Represents absence type



Storage Classes :-
 - Storage class define scope (visibility) and life-time of variables and/or function within C++ Program 
 Type :- 
  auto     :- Default storage class for all local variables | Ex :- auto int month;
  
  register :-
   - Define local variables that stored in register instead of RAM 
   - Means variable has maximum size equal to register size(usually one word) and can't have unary '&' operator
     applied to it as it does not have a memory location
   Ex :-  register int  miles;   

  static :-
   - Instruct compiler to keep local variable in existence during life-time of program instead of creating and 
     destroying it each time it comes into and goes out of scope
   - also be applied to global variable
   - It causes that variable's scope to be restricted to the file in which it is declared
   - Static used on class data member it causes only one copy of that member to be shared by all object of its class
   Ex :- static int count = 10;

  extern :- 
   - Used to give reference of global variable that is visible to ALL program files
   - extern is used to declare a global variable or function in another file
   Ex :- extern int count;

  mutable :-
   - Applies only to class objects
   - Allow member of object to override const member function
   - mutable member modified by const member function
 


Operator :-
 - Operator is symbol that operates on value or variable
 
 Arithmetic :- Perform Mathematical operations
  Ex :- +, -, *, /, %(Reminder), ++, //

 Assignment Operator :- Used for assign value to variable
  Ex :- =, +=, -=, *=, /=, %= , <<=, >>= , &=, ^= , |=

 Relational Operator :- If relation is true returns 1 otherwise false(0)
  Ex :- ==, >=, <=, !=, >, <

 Logical Operator :- Returns either 0 or 1 depending upon whether expression results true or false
  && - Logical AND return true if both condition is true
  || - Logical OR return true if any condition is true
  !  - Logical NOT return true if operand is 0

 BitWise Operator :- Perform bit-level operation
  &	Bitwise AND         |  |	Bitwise OR   | ^	Bitwise exclusive OR
  ~	Bitwise complement  |  <<	Shift left   | >>	Shift right

 Comma Operator :- Link related expressions together
  Ex :- int a, c = 5, d;

 sizeof() Operator :-
  - Unary operator that return size of data (constants, variables, array, structure, etc.)
  - Format Specifier %zu is used to print value

 Unary operator :- Works with single operand 
  Ex :- ++, -- 

 Other Operator :-
  ?: Ternary operator  | & Reference operator | *  Dereference operator | -> Member selection
  .  dot operator      | * Pointer operator   



Control Flow (Condition | Loop | Statement | Switch Case):- 

 Condition  :-
  If               :- if(expression){  //True code  }
  if...else        :- if(expression){  //True code  } else { //False code }
  if else ledder   :- if(expression){ //code } else if(expression){ //code } else { //False code}
  Nested If.. else :- if(expression){ if(expression){ //True code } else { //False code } } else{ //False code }
  Ternary          :- Expression ? True Code : False Code;     


 Loop :- 
  - Repeat block of code until specified condition is not false

  For Loop   :-  for(Initalization; Condition; Increment/Decrement){ //code }
  While Loop :-  while(expression){ //code  // Increment/Decrement } 
  Do..While  :-  do { //code // Increment/Decrement }while(expression)
              - Loop run at least one time in program

  - for( ; ; ) infinite loop if condition is not false  


 Statement :-
  Break    :- Terminate loop immediately 
  Continue :- Skips current iteration of loop and continues with next iteration
 
  goto     :- 
   - Transfer Program control to specified label
   - label is identifier When goto statement is encountered, 
   - Control of program jumps to label: and starts executing code
   Syntax :- 
    goto label;
    label:
    statement;  
            
         
 Switch Case :-
  - Allow variable to be tested against list of values
  - Expression used in switch statement must have an integral or enumerated type
  - expression is evaluated once and compared with values of each case label
  - If there is match, corresponding statements after matching label are executed otherwise default statements executed
  - Default statement is optional

  Syntax :- 
   switch(expression){
      case constant1:
        // Statement   
        break; 
                
      case constant2:
        // Statement   
        break; 

      default:
        // Statement
   } 



Function :-
 - Block of code that perform specific task
 - Every program must have main() function from where execution begin
 - Function declaration tells compiler about function name, return type and parameters
 - function definition provides actual function body
 

 Syntax :-
  return_type function_name(Parameter list){
      // function body
  }
 function_name(Parameter)  // Call function 

 Function Call by Value     :- Passing function arguments value
 Function Call by Reference :- Passing function arguments address
 Function Call by Pointer   :- 
   void swap(int *x, int *y){
   }
   swap(&a, &b);
 Default argument :- 
  - Specify default value for parameters
  Ex :-
    int sum(int a, int b = 20) {}
    sum(a);
  


 Recursion :- 
  - Process of repeating items in self-similar way
  - If Program allows you to call function inside same function called recursive
  Example :-
   void recursion() {
    recursion(); /* function calls itself */
   }


 Variable Arguments :-
  - Accept variable number of parameters based on requirement
  Example :- 
   int func(int, ... ) {}
   int main() {
    func(1, 2, 3);
    func(1, 2, 3, 4);
   }
 - Use stdarg.h header file which provide functions and macros to implement functionality of variable argument

 
 Command-line Arguments :-
  - Pass some values from command line 
  - Handled using main() function argument where argc refers to number of arguments passed and 
    argv[] is pointer array which points to each argument passed to program
  Example :-
   int main( int argc, char *argv[] )  {
    if( argc == 2 ) {
      printf("The argument supplied is %s\n", argv[1]);
    }
   }
  - argv[0] holds name of program itself 
  - argv[1] is pointer to first command line argument supplied 
  - *argv[n] is last argument 
  - If no arguments are supplied argc will be one and if pass one argument then argc is set at 2
  Output :-
   - $./a.out "testing1 testing2" // Command-line argument
   - The argument supplied is testing1 testing2



Math Operation :-
 - C++ has rich set of mathematical operations which performed on various number
 - Include math header file <cmath>
  cos() - Take angle (as double) and return cosine
  sin() - Take angle (as double) and return sine
  tan() - Take angle (as double) and return tangent
  log() - Take number and return natural log of that number
  pow() - First number you wish to raise and second is power you wish to raise
  hypot() - Pass length of two sides of right triangle it will return length of hypotenuse.
  sqrt()  - pass number it will gives you square root
  abs()   - return absolute value of an integer that passed 
  fabs()  - return absolute value of an decimal that passed
  floor() - Find integer which is less than or equal to argument passed 
  srand/ rand()  - Return pseudo random number


 


