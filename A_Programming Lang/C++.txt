Overview :-
 - C++ is middle-level language as combination of both high-level and low-level language feature
 - Developed by Bjarne Stroustrup in 1979 at Bell Lab
 - C with Classes later renamed C++ in 1983(Simula 67 | Algol 88)
 - C++ is superset of C, any valid c program valid in c++
 - C++ supports object-oriented programming :- Encapsulation | Data hiding | Inheritance | Polymorphism
 - Statically typed(Error checking Compile time) | Compiled | General-purpose | Case-sensitive | Portable 
 - .cpp extension  |  Case sensitive  |  GNU C/C++ compiler
 - Standard Template Library (STL) giving rich set of method manipulating data structure

 
 Basic Syntax :-
  #include <iostream.h>
  using namespace std;
  int main() {                     /* main() where program execution begin */
    cout << "Hello World" << endl; /* prints Hello World */
   return 0;
  }

  Block   :- Set of logically connected statement that surrounded by opening and closing braces
  Comment :- /* */ 
  endl    :- Insert new-line
  <<      :- Operator pass multiple values out to screen
  ;       :- Statement terminator
  iostream.h :- input/output stream(Sequence of byte)



Identifier :- 
 - Name used to identify variable, function or any other user-defined item
 CharacterSet       - A-Z,a-z 
 Digit              - 0 to 9     
 Special Character  - 31
 WhiteSpace Character - Blank Space, Horizontal Tab, Carriage Return and Form Feed   

 Rules :-
  - First letter start with either letter(Atoz/a_z) or underscore(_) followed by more letters and digits
  - Cannot start name with digit or not allow any special character at first such as @, $, and %
  - Name Must be unique cannot use keyword name as identifier



Variable :-
 - Container hold data which identify by its name
 - extern declare variable at any place
 - Inside function or block called local variable only access within function not accessible outside
 - Outside function variable called global variable accessed anywhere in program throughout program 
 
 Type  :- int  char  float  bool  double  void  wchar_t
 Other :- Enumeration  Pointer  Array  Reference  Classes

 Ex :- 
  int intValue = 10;   // declare variable with int type
  intValue = 10.10;    // Wrong cannot change int to float
  float a,v,c;         // Variablelist with no value
  int g = 10, n = 20;  // g represent memory location "lvalue" | 10 represent actual data "rvalue"
  
 Type Qualifiers in C++ :-
  - Provide additional information about variable
  const    - Value Cannot be changed by program during execution
  volatile - Variable's value may be changed in ways not explicitly specified by program
  


Keyword :- 
 - Reserved word cannot used as constant or variable or any other identifier name
 void  short  int    float  char      double   long      bool signed unsigned enum union const sizeof 
 for   while  do     break  continue  goto     switch    case if     else     true false   
 try   catch  throw  return auto      new      register  this    
 class extern static using  namespace volatile delete    struct
  
 private protected public default
 asm     operator explicit   export
 typedef typeid   typename   reinterpret_cast
 friend  virtual  const_cast static_cast dynamic_cast
 inline  wchar_t  mutable    template	



DataType :- 
 - Determine type and size of data that associated with variables 
 Built-in :-1 byte = 8 bit, 1 kb = 1024 byte, 1mb = 1024kb
  Type    :- Boolean | Character | Integer | Floating point | Double floating point | Valueless | Wide character
  Keyword :- bool    | char      | int     | float          | double                | void      | wchar_t

   Type          Size     Range              Format Specifier    Example 
   char	         1 byte	−128 to 127         %c                  char test = 'B';
   short	       2 byte	−32,768 to 32,767                       short a = 10;
   int	         4 byte	−32,768 to 32,767   %d, %i              int id  = 0;            |  -5, 10;
   float	       4 byte                     %f                  float no = 22.442e2;    
   double	       8 byte                     %lf                 double no = 22.442e2;
   wchar_t       2 or 4 1 wide character
   long int      8 byte                     %ld, %li            long a;
   long double	 12 byte                    %Lf                 long double d;
   unsigned int  4 byte	 0 to 65,535        %u                  unsigned int x = 35;
   short int	   2 byte                     %hd
   unsigned int	                            %u
   long int	     8 byte                     %li
   
 
 Type modifiers :-
  Signed   - Store both positive and negative number
  Unsigned - Store only positive number
  long  | Short
  

 typedef :- Create new name for existing type
  Syntax  :- typedef type newname;
  Ex :- 
    typedef int feet;  
    feet distance;


 Enumerated :-
  Syntax :- enum enum-name { list of names } var-list; 
  Example :- 
    enum color { red, green = 5, blue } c;
    c = blue;
  - By default value starting from 0 to n-1 but specify custom value( blue = 2 but green=5 so blue=6)
  


Constant/Literals :- 
 - Representing fixed values | Ex :-  1, 2.5, 'c' 

 Integer   :- Numeric without any fractional or exponential part     | 0, 077(Octal), 0x7f(Hexa)
 Floating  :- Numeric literal has either fractional or exponent form | -2.0, 0.00234, -0.22E-5 (E-5 = 10-5)
 Character :- Single character inside single quotation marks         | 'a', 'm', 'F', '2', '}'
 String    :- Sequence of character enclosed in double-quote marks   | "String" , "" ,  "    ", "S", 
 Constant  :- Value cannot be changed once declared (Preprocessor)   | const double PI = 3.14; #define LENGTH 10  
 void      :- Represents absence type 

 Escape Sequence :- Character with backslash which has special meaning
  \b - backspace  | \f - formfeed        | \\ - Backslash      | \n - newline         
  \r - return     | \? - Quotation Mark  | \t - Horizontal tab | \v - vertical tab
  \' - Single Quotation Mark  | \" - Double Quotation Mark     | \0 - Null Character



Operator :- 
 - Symbol that operate on value or variable
 Arithmetic :-  +,  -,  *,  /, %(Reminder), ++, //
 Assignment :-  =, +=, -=, *=, /=, %= , <<=, >>= , &=, ^= , |=
 Relational :- ==, >=, <=, !=,  >,  <
 Logical    :- &&, ||,  !, 
 BitWise    :-  &,  |, 	^, 	~, <<, >>, >>	
 Comma      :- int a, c = 5, d;
 Other      :- ?: Ternary  |  & Reference  |  * Dereference  |  -> Member selection  | . dot  |  * Pointer
 sizeof()   :- Return size of data (constants, variables, array) | Format Specifier %zu print value
 Unary      :- Works with single operand  |  ++, -- 



Storage Classes :- 
 - Scope (visibility) and life-time of variables or function within C++ Program 

 auto :- Default storage class for all local variables | Ex :- auto int month;
  
 register :-
  - Local variables that stored in register instead of RAM 
  - Maximum size equal to register size(One word) and can't applied unary '&' operator to it as it no memory location
  Ex :- register int miles;   

 static :-
  - Existence life-time of program
  - Scope restricted to file in which it declared
  - Static used on class data member it causes only one copy of that member shared by all object of its class
  Ex :- static int count = 10;

 extern :- 
  - Give reference of global variable that visible to ALL program files
  - Used to declare global variable or function in another file
  Ex :- extern int count;

 mutable :-
  - Apply only to class objects and allow member object to override const member function
  - mutable member modified by const member function
 


Control Flow (Condition | Loop | Statement | Switch Case):- 

 Condition  :-
  If               :- if(expression){ //True code  }
  if...else        :- if(expression){ //True code  } else { //False code }
  if else ledder   :- if(expression){ //code } else if(expression){ //code } else { //False code}
  Nested If.. else :- if(expression){ if(expression){ //True code } else { //False code } } else{ //False code }
  Ternary          :- Expression ? True Code : False Code;     


 Loop :- 
  For Loop   :- for(Initalization; Condition; Increment/Decrement){ //code }
  While Loop :- while(expression){ //code  // Increment/Decrement } 
  Do..While  :- do { //code // Increment/Decrement }while(expression)   // Run at least one time
  for( ; ; ) :- Infinite loop if condition not false  


 Statement :-
  Break    :- Terminate loop immediately 
  Continue :- Skips current iteration of loop and continues with next iteration

  goto :- 
   - Transfer Program control to specified label
   - label identify When goto statement encountered 
   - Control of program jump to label: and starts executing code
   Syntax :- 
    goto label;
    label:
    statement;  
            
         
 Switch Case :-
  - Expression used must have integral or enumerated type
  - Expression is evaluated once and compared with values of each case label
  - If match corresponding statement executed otherwise default statements executed
  - Default statement is optional
  
  switch(expression){
    case constant N:
    // Statement   
    break; 
              
    default:
    // Statement
  } 



Function :-
 - Block of code that perform specific task
 - Function declaration tells compiler about function name, return type and parameters
 - function definition provide actual function body
 
 Syntax :-
  return_type function_name(Parameter list){
    // function body
  }
 function_name(Parameter)   // Call function 

 Function Call by Value     :- Passing argument value
 Function Call by Reference :- Passing argument address
 Function Call by Pointer   :- void swap(int *x, int *y){}  |  swap(&a, &b);
 Default argument           :- Specify default value for parameters
  int sum(int a, int b = 20) {}
  sum(a);


 Recursion :- 
  void recursion() {
    recursion();      /* function calls itself */
  }


 Variable Arguments :- 
  - Accept variable number of parameter based on requirement
  - stdarg.h header file provide function and macros to implement functionality of variable argument
  int func(int, ... ) {}
  int main() {
    func(1, 2, 3);
  }


 Command-line Arguments :-
  - Pass value from command line using main() function argument 
  - argc refer number of argument and argv[] pointer array which point to each argument passed to program

  int main(int argc, char *argv[] )  {
    if(argc == 2) {
      printf("Argument supplied is %s\n", argv[1]);
    }
  }
  - argv[0] hold program name itself | argv[1] pointer to first command line argument
  - *argv[n] is last argument 
  - If No argument supplied argc will be one and if pass one argument then argc set 2
  
  Output :-
   - $./a.out "testing1 testing2" // Command-line argument
   - The argument supplied is testing1 testing2



Math Operation :-
 - <cmath> math header file has rich set of mathematical operations which performed on various number
 cos() | sin() | tan() | sqrt() | pow() | abs() | floor() | srand/rand()
 log()  - Take number and return natural log of that number



Array :-
 - Store same type data in contiguous manner in fixed-size memory location
 - Array element accessible via its index => [0]
 - If element is greater than array size ArrayIndexOutOfBoundsException Throw
 Syntax :- type array_name[arraysize];    // Size must be Integer
 
 Example :- 
  int arr[10];                 // One-Dimensional array
  int arr[3] = {1,2,3};        // Initializing array 
  arr[2] = 2;                  // Initializing array with specified index
  int access_arr = arr[1];     // Access array element 
  
  int multi_arr[5][10];        // Two-Dimensional array - [Row][Column]
  int multi_arr[5][10] = {1,2,3,4,5};
  int val = multi_arr[2][5];   // Access array element
  int multi_arr[5][10][4]      // Multi-Dimensional array - [Row][Column][Dimension]


 Passing Array as Function Arguments :- void myFunc(int *param)  |  (int param[10])  |  (int param[])
 Return Array From Function          :- int * myFunc()     
 
 Pointer to array :-  
  double *p;           // Declare Pointer  
  double balance[10];  // Declare array
  p = balance;         // Pass Array to Pointer
  //balance is pointer to &balance[0], is the address of first element of array balance



String :-
 - One-dimensional array of characters terminated by null character '\0'   
 Types of string representation :-  C-style character string  |  String class
 Ex :- 
  char greeting[6] = {'H', 'e', 'l', 'l', 'o', '\0'};
  printf("Greeting message: %s\n", greeting );

 Method :-
  strcpy(s1,s2) | strcat(s1,s2) | strlen(s1) | strcmp(s1,s2) 
  strchr(s1,ch) :- Return pointer to first occurrence of character ch in string s1
  strstr(s1,s2) :- Return pointer to first occurrence of string s2 in string s1 



Pointer :-
 - Every variable has location and every location has its address which accessed using ampersand(&) Operator
 - Pointer variable value is address of another variable
 - * asterisk sign used to declare variable as pointer
 Syntax :- type *variable_name;
 
 Example :- 
  int var = 10;
  int *ip; or int *ip = NULL; // Null pointer 0 value
  ip = &var; 
  cout << "Value of *ip variable: " << *ip << endl; // 10 - Print  | &var or only var print variable address

 Array of Pointer :- 
  int *ptr[variable] or int *ptr[10,20,30]
  ptr[i] = &var[i]
  *ptr[i] or ptr[i] 


 Pointer to Pointer :-
  - First pointer store address of second pointer and second pointer store address of variable
  Example :-
   int var = 30;
   int *ptr;
   int **pptr;
   ptr = &var;
   pptr = &ptr;  


 Passing Pointer to Function :-
  getSeconds(&sec);     // Declare function parameter as pointer type
  void getSeconds(unsigned long *par) {
    *par = time(NULL); 
    return;
  }

  //Function which accept pointer also accept array
  int balance[5] = {1000, 2, 3, 17, 50};
  getAverage(balance, 5);
   
  double getAverage(int *arr, int size) {
    int i, sum = 0;       
    double avg;           
    for(i = 0; i < size; ++i){sum += arr[i];}
    avg = (double)sum / size;
    return avg;
  }  

 
 Return Pointer from function :-
  int * myFunction() {
  }  

 


Structure :-
 - Allow to combine different kind of data item
 - Structure are used to represent record
 - To declare structure struct keyword use
 - Structure tag is optional and each member definition is normal variable definition, such as int 
 - Before final semicolon, Specify one or more structure variables but it is optional
 

 Defining Structure :-
  struct [structure name] {
  member definition;
  member definition;
  } [one or more structure variables];  
 

 Example :-
  struct Books {
   char  title[50];
   char  author[50];
   char  subject[100];
   int   book_id;
  } book;


 Accessing Structure :-
  - To access structure member use member access operator (.)
  struct Books Book1;
  strcpy( Book1.title, "C Programming");
  cout << "Book 1 title : " << Book1.title << endl;


 Structure as Function Argument :-
  - Pass structure as function argument is the same way pass any other variable or pointer
  void printBook( struct Books book ){
    cout << "Book title : " << book.title << endl;
  }


 Pointer to Structure :-
  struct Books *struct_pointer; 
  struct_pointer = &Book1;     // Store address of structure variable in above defined pointer variable
  struct_pointer->title;       // To access members of structure using pointer

  void printBook( struct Books *book ){
    cout << "Book title : " << book->title <<endl; 
  }


 typedef :- Give structure alias name
  typedef struct {
    char  title[50];
  }Books;
  Books b1, b2;  // Books used as abbreviation for type unsigned char 
  


References :-
 - Alias name for already existing variable
 - Once reference initialized with variable either variable name or reference name used to refer variable
 Syntax :- type& ref_name = ref_variable

 References vs Pointer :-
  - Reference cannot be null while Pointer be null
  - Once reference initialized to object cannot be refer other object
  - Pointers pointed to another object at any time
  - Reference must be initialized when it created while Pointer initialized at any time
 

 Example :-
  int i;
  int& r = i; // Reference variable
  i = 5;
  cout << "Value of i : " << i << endl;
  cout << "Value of i reference : " << r << endl;
  Output :-
  Value of i : 5
  Value of i reference : 5


 Passing Parameter by Reference :-
  void swap(int& x, int& y);
  swap(a, b); 


 Reference as return value :-
  double vals[] = {10.1, 12.6, 33.1, 24.1, 50.0};
  double& setValues(int i) {
    return vals[i];   // return a reference to the ith element
  } 
  setValues(1) = 20.23; // change 2nd element



Date / Time :-
 - <ctime> header file used
 - Structure type tm hold date and time in form of C structure
 Types time-related :- clock_t, time_t, size_t, and tm
 Ex :-
  struct tm {
    int tm_sec;   // seconds of minutes from 0 to 61
    int tm_min;   // minutes of hour from 0 to 59
    int tm_hour;  // hours of day from 0 to 24
  }

 Ex :-
  int main() {
    time_t now = time(0);     // current date/time based on current system
    char* dt = ctime(&now);   // convert now to string form
    cout << "The local date and time is: " << dt << endl;
    tm *gmtm = gmtime(&now);  // convert now to tm struct for UTC
    dt = asctime(gmtm);
    cout << "The UTC date and time is:"<< dt << endl;
  }
  Output :- 
  The local date and time is : Sat Jan 8 20:07:41 2011
  The UTC date and time is   : Sun Jan 9 03:07:41 2011 



Input/Output :-
 - Stream are sequences of bytes 
 - Byte flow Input device -> Main memory(Input) | Main memory -> Display screen called(Output)

 I/O Library Header Files :-
  <iostream> :- Contain cin, cout which correspond to standard input, output
  <iomanip>  :- Performing formatted I/O with parameterized stream manipulator such as setw and setprecision
  <fstream>  :- For user-controlled file processing
 

 Standard Output Stream (cout) :-
  - Instance of ostream class written as << (Insertion Operator) display output on screen
  char str[] = "Hello C++";
  cout << "Value of str is : " << str << endl;
  Output :- Value of str is : Hello C++


 Standard Input Stream (cin) :-
  - Instance of istream class written as >>(extraction operator) take input from user
  char str[];
  int age;
  cout << "Enter Name : " << endl;
  cin >> str >> age;
  cout << "Your name is: " << str << age << endl;
  Output :- Your name is: cplusplus
 

 Standard Error Stream (cerr) | Standard Log Stream (clog) :-
  - Both Instance of ostream class where unbuffered cerr and buffered clog written as <<  
  - Display error and log on screen
  Ex :- 
   char str[] = "Hello error and log";
   cerr << "Value of error is : " << str << endl;
   clog << "Value of log is : " << str << endl;



OOPS :- 



File Stream :-
 - fstream read and write data from file
 - To perform file processing <iostream> and <fstream> used
 
 Different Header :- 
  ofstream - output file stream used to create file and write information to file
  ifstream - input file stream used to read information from files
  fstream  - file stream capabilities of both ofstream and ifstream 
 

 Opening File :-
  - open() function of fstream, ifstream and ofstream object
  Syntax :- void open(const char *filename, ios::openmode mode);
  Different Mode :-
   ios::app - Append mode, All output be appended to file end
   ios::ate - Open file for output and move read/write control to end of file
   ios::in  - Open file for reading
   ios::out - Open file for writing
   ios::trunc - If file already exists, its contents will be truncated before opening file
  
  Ex :-
   ofstream outfile;  
   fstream  afile;
   outfile.open("file.dat", ios::out | ios::trunc ); // combine two or more of these values by ORing 


 Closing file :- void close() Terminate automatically and flushes all allocated memory and close all opened files
 Writing File :- Using stream insertion operator(<<)
 Reading File :- Using stream extraction operator(>>)


 File Position Pointer :-
  - istream and ostream provide member function for repositioning file-position pointer  
  fileObject.seekg(n);           // position to the nth byte of fileObject (assumes ios::beg)
  fileObject.seekg(n,ios::cur);  // position n bytes forward in fileObject
  fileObject.seekg(n,ios::end);  // position n bytes back from end of fileObject
  fileObject.seekg(0,ios::end);  // position at end of fileObject



Exception Handling :-
 - Exception problem arise during execution of program
 - try/catch block is placed around code that handle exception code 
 - Provide list of standard exception in <exception>
 std:exception - Parent class of all standard C++ exceptions
 C++ exception handling built upon three keyword :- try, catch and throw


 try   :- Identify block of code form which particular exception activated | Followed by one or more catch block
 catch :- Program catch exception with exception handler at the place in program where you want to handle problem 
 throw :- Program throws exception when problem shows up


 Syntax :-
  try { 
    // protected code
  } catch(ExceptionName e1) {
     // catch block
  } catch(ExceptionName n) {
     // catch block
  }

 
 Throwing Exception :- Exception thrown anywhere within code block using throw Statement
  double division(int a, int b) {
    if( b == 0 ) {
      throw "Division by zero condition!";
    }
    return (a/b);
  }
  


Memory Management :- 
 Dynamic Memory in divided into two part :- Stack  |  Heap
  Stack :- All variables declared inside function take memory from stack
  Heap  :- unused memory of program allocate memory dynamically when program run
 - new operator return address of allocated space
 - delete operator de-allocate memory that allocated by new operator
 Syntax :- new data-type;

 Ex :- 
  double* pvalue = NULL;   // Pointer initialized with null
  pvalue  = new double;    // Request memory for variable
  *pvalue = 29494.99;      // Store value at allocated address
  cout << "Value of pvalue : " << *pvalue << endl;
  delete pvalue;           // Release memory pointed to by pvalue 
  Output :- Value of pvalue : 29495
 
 
 Dynamic Allocation For Array :-
  char* pvalue  = NULL;         // Pointer initialized with null
  pvalue  = new char[20];       // Request memory for the variable 
  delete [] pvalue;             // Delete array pointed to by pvalue


 Dynamic Memory Allocation for Object :-
  class Box {
   public:
    Box()  { cout << "Constructor called!" <<endl; }
    ~Box() { cout << "Destructor called!" <<endl;  }
  };
  Box* myBoxArray = new Box[4];  // Box class
  delete [] myBoxArray;          // Delete array
 
 

Namespace :-
 - Designed to overcome difficulty of same name 
 - Use additional information with same name available in different libraries
 Syntax :- 
  namespace namespace_name {
    // code declaration
  }
 Call Using prepend(::) :- namespace_name::variable_OR_function

 Ex :-
  namespace first_space  { void func() { cout << "Inside first_space" << endl; } }
  namespace second_space { void func() { cout << "Inside second_space" << endl; } }
   
  int main () {
   first_space::func();  // Calls function from first name space
   second_space::func(); // Calls function from second name space 
   return 0;
  } 

 
 Using directive :- 
  - To avoid prepending of namespaces with using namespace directive
  - Also use to add particular method Ex :- using std::cout;  
  using namespace first_space;
  func(); // Call function from first name space

 
 Nested namespace :- 
  namespace namespace_name1 {
    namespace namespace_name2 {
    }
  }
  using namespace namespace_name1::namespace_name2; // Access members of namespace_name2
  using namespace namespace_name1;                  // Access members of namespace:name1
