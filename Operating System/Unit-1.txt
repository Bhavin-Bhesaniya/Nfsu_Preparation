Glavin
 Topics :-
  - What is Computer and Other Defination
  - What is OS?
  - OS Structure Type
  - OS Duties/ Function / Services
  - Types Of OS 
  - What is Spooling
  - What is System Call 
  - What is Booting
  - What is Kernel
  
  

 What is Computer and Other Defination?
  Computer :- General purpose device that execute sequences of instruction to perform numerical calculations and other tasks. 
  Computer Science  :- Study of computer systems and computer processes
  Computer hardware :- Collection of all physical elements of computer system 
  Computer software :- Collection of all program stored in computer system and executed by computer system

  Software             :- Collection of computer programs, libraries and related data are referred to as a software
  Application Software :- Perform task for user 
  System software      :- Operate and controls by computer system and provide platform to run application software
  Computer program     :- Collection of instructions that performs specific task when executed by computer 
  
  Algorithm   :- Computer program that performs well-defined task 
  Kernel      :- Part of OS which interacts directly with hardware and performs most crucial tasks
  Microkernel :- Support only core OS functionalities
  Shell       :- known as command interpreter which is part of OS that receives command from user and gets them executed 
  BIOS(Basic Input/Output System) :- Stored in EPROM and used by CPU to perform start-up procedures when computer is turned on.




 What is OS?
  - OS is system program that acts as interface between user and computer hardware which controls execution of all kinds of programs
    and manages all resources of computer system
  - First OS is ATLAS developed by Tom Kilburn professoor at Manchester University in 1962 
    Diagram :- https://www.tutorialspoint.com/operating_system/images/conceptual_view.jpg
   Primary Goals :- Windows | Mac : Machintosh  
    - Convenience : Use Easiet way to any hardware 
    - Throughput  : Number of tasks executed per unit time  (Linux)

 


 Os Duties | Function | Services :- 

  Resource Management | Resource Governance:-
   - Manage all kinds of resources both hardware and software using Schedulers for use in parallel processing

  Process Management | Process Execution :-
   - Load program into memory, execute it in CPU and Handle it using various CPU Scheduling
   - Also Provide mechanism for process synchronization, Inter Process Communication(IPC) and Deadlock handling 
   
  Storage/File management or Manipulation:-
   - Support Storage allocation, Disk scheduling using File System and Manage all file operations based on permission mode

  Memory management :-
   - Keep track of memory to identify which part being used by which Job(Process) 
   - Allocating and deallocating memory space of Primary(Main) Memory because size limits

  Protection | Security & Privacy:-
   - OS controls all access to system resources to Ensure that external I/O devices are protected from invalid access attempt
   - Windows use Kerberos Security Protocol
  
  I/O Operation | I/O Management | Device Management :-
   - Keep tracks of all devices and Manage device communication between User and Device via their respective drivers 
   - Program that responsible for this task is known as I/O controller.

  Communication :-
   - Handle routing, connection strategies
   - Processes can be on one computer or on different computers, but they are connected through computer network
   - Communication may be implemented by two methods, either by Shared Memory or by Message Passing

  Error Handling | Error detection :-
   - OS constantly checks errors and takes appropriate action to ensure correct and consistent computing     




 OS Structures type :-  
  
  Monolithic Architecture :-   
   - Entire OS working in kernel space so execution is so fast and process run completely in single address space
   - It is static single binary file
   - Kernel provides various services using system calls
   - If single service fails its lead to entire system failure and to add new services entire architecture needs to modify
   Example :- MS DOS, Unix, Linux, Open VMS, XTS-400


  Layered Architecture :-
   - OS broken into number of layers (levels) where every layer has different functionality
   - Bottom layer (layer 0) is hardware and topmost layer (layer N) is user interface
   - Each layer can only uses function of lower level layer
   - Change in one layer specification does not affect rest of layers
   - Layer 1 to 6:- Hardware, CPU Scheduling, Memory Management, Process Management, I/O Buffer, User Program
    Example :- Windows NT
   
    
  Microkernel Architecture :-  
   - Removed all non-essential components from kernel and implementing them as system and user programs
   - New services added in user space and does not require kernel to be modified which increased security and stability
   - If any service fails then rest of operating system remains untouched
   Example :- MacOS, Mach, L4, AmigaOS, Minix, K42
     

  Modular Architecture :-
   - System parts allocated in independent files called modules which added to system at run time
   - Requires small amount of time for load modules
  

  Hybrid Kernel :-
   - Combination of both monolithic kernel and mircrokernel
   - It use speed and design of monolithic kernel and modularity and stability of microkernel
   Example :- Windows NT, Netware, BeOS




 Types of operating systems â€“ 
   Single process   :- MS DOS, 1981
   Multiprogramming :- Dijkstra, early 1960
   Multitasking     :- CTSS, MIT, early 1960


  Batch Operating System | Batch Processing :- 
   - Set Similar kind of process(job) in same batch in First Come First Served(FCFS) manner and to computer so it can execute it
   - When Job request for I/O at time CPU is Idle which is major disadvantages (Non-Preemption)
   - IBM create FORTRAN Alone with IBSYS 709X in 1960 

   Example :-
    User ---> Set Job in ROM device ---> Go to operator ---> Operator group similar job and execute  
    ---> One time one process execute (No particular time for output) 
    ---> Output is write to disk and get to user from operator
    ---> User use output in own system for process  
     
   Diagram :- https://www.tutorialspoint.com/operating_system/images/batch_processing.jpg



  Multiprogramming :- IDLENESS
   - Increases CPU utilization by keeping multiple jobs(process) in main memory so that CPU always has one to execute
   - It is NonPre-emptive scheduling means if we give one process to cpu, cpu will complete that entire process and only after complete
     process pick another process
   - Sometime cpu will go for I/O operation at that time cpu will pick up another process from job pull So cpu IDLE time is zero   
   Diagram :- https://www.tutorialspoint.com/operating_system/images/memory_layout.jpg



  Multitasking | Time-Sharing :- Responsiveness
   - Sharing small portion of time or time quantum among multiple processes by CPU Scheduling 
   - CPU executes multiple process using switching which Reduce CPU IDLE time
   - It is pre-emptive means Each process has given particular time in which it complete execution otherwise it will be switching
     to another process by CPU Scheduling but process still available if not complete in within given time
   - Due to its fast switching Security arise with program data, data communication and its reliability 
   - Response time should be minimal
   Diagram :- https://www.tutorialspoint.com/operating_system/images/multitasking.jpg    



  Real Time operating System(RTOS):-
   - Fixed time Constraint system where time constraint matter lot and can't be delays
   - Time taken by system to respond input and display required updated information is termed as response time   
   - VxWorks, QNX & RTLinux are real-time operating system and Palm OS is mobile operating system for Personal Digital Assistant(PDA) 
   Example :- Embedded systems, Robotics, Scientific utilities, etc.
    
   Types :-
    Hard-Real Time System :- Critical tasks needs to complete on time there no place for delays 
    Soft-Real Time System :- Less restrictive with limited utility than hard-real time system



  Distributed Operating System | Cluster :-
   - Multiple Processors serve Multiple applications to multiple users using Central Processor
   - Processor communicate with each other through various communication lines like network connection which referred as loosely coupled
   - OS distribute computation logics among several physical processors
   - Reduction of delays in processing and loading on host computer
   - Processors do not share memory instead each processor has its own local memory, storage etc...
   - Availability, Load balancing, Scalability     
   - If Processors connect with local network (Single network) like Single server it is called "Cluster Operating System"


 
  Embedded Systems :-
   - Work on fixed machine like A.C.
   - You can't customally change its functionality  



  Network Operating System :-
   - Runs on server computer and provides server capability to manage application, user data and other networking functionality
   - Purpose to allow shared file and printer access among multiple computers in network
     typically local area network (LAN), private network or to other networks.
   - Centeralized Server so security managed and software upgrade easily and enable remote access 
   - Dependency on central server, High cost , Regular maintenance and update are some disadvantages




 Spooling(Simultaneous Pheripheral Operations Online) :- 
   - Different Pheripheral devices(I/O Device) can run simultaneously 
   - Provide buffer area in secondary memory to save CPU time and user not need to wait for I/O process
   Diagram :- https://www.tutorialspoint.com/operating_system/images/spooling.jpg
 



 What is SystemCall :-
  - To use system functionality we need to go in kernel mode because we only can access user mode
  - System call is mechanism using which user program request kernel to access all system functionalities 


  Type of System Call :- 
   E.x. :- Fork, exec, getpid, getppid, wait, exit
    File                        :- Open, read, write, close, create file
    Device                      :- Read, write, Repoisition, 
                                   iocte(manipulates underlying device parameter of special files) 
                                   fcnte (access point for several advanced operations on file descriptors)
    Security                    :- chmod(Chagen Privilege Mode), umask
    Process Control             :- load, abort, execute, fork, wait, signal, allocate
    Information                 :- getpid, attribute, get system data
    Inter-Process Communication :- Pipe, shmget(Get Shared Memory), create/delete connection
  
   Fork :-
    - In UNIX Fork() Create child process of parent process
    - Returns process ID which is generally process id of child process
    - Return value 0 :- Child process , 1 :- Parent process, -1 : if child process not created
    - Formula :- 2N-1 (Parent process) | 2N (Child process)

   Exec :- exec replace current process with another (different) one

   Wait :-
    - Used by parent process to determine termination of child process
    - Parent process uses Wait() system call and gets exit status of child process as well as PID of child process which is terminated 
 

  Dual-mode operation :-
   - User mode 
   - Kernel mode | supervisor mode | system mode | privileged mode 
   Mode bit :-  0 : Kernel, 1 : User 

   Example :- 
    User Mode                                                                 Mode Bit = 1
        User Process Executing --> Get System Call \                / Return From System Call
                                                    \ 1   Trap   1 / 
    ----------------------------------------------------------------------------------------------------
                                                      \ 0      0 /
    Kernel Mode                                   Execute System Call        Mode Bit = 0 
              
    




 What is Booting :-
  - Booting is process of starting computer and loading kernel
  - When computer power is turned on then cpu will move to BIOS(Basic Input Output System) in ROM 
  - BIOS run POST(power-on self test) process which check all hardware
  - On POST process successful BIOS load MBR(Master Boot Record) to RAM
  - Now MBR load bootstrap loader to RAM
  - bootstrap loader loads OS, Kernel and much more in RAM
  
  Types :- 
    Hard Booting - Power On system
    Soft Booting - Restart / Ctrl + Alt + Del twice




 What is Kernel :- 
  - Kernel is central component of os that manages all operations of computer
  - Acts as bridge between applications and data processing which performed at hardware level using IPC and system calls

  Objectives of Kernel :
   - Establish communication between user level application and hardware
   - Decide state of incoming processes
   - To control disk management, memory management, task management

  Types of Kernel :- 
   Monolithic, Microkernel, Hyperkernel in OS Structure Type


RAM(Random Access Memory) Vs ROM (Read-Only Memory):-
 Ram :-
  - Volatile memory 
  - Use for starting and loading operating system and application
  - Faster
  - 32 bit Max Ram size :- 4 GB AND 64 : 16GB 
  - Types :- 
    1)DRAM  - Dynamic RAM must be continuously refreshed, or otherwise, all contents are lost
    2)SRAM  - Static RAM is faster, needs less power but is more expensive. However, it does need to be refreshed like DRAM.  
    3)SDRAM - Synchronous Dynamic RAM run at very high clock speeds
    4)DDR   â€“ Double Data Rate provide synchronous Random Access Memory

 
 ROM :- 
  - Non-volatile 
  - Write once read any no. of time
  - Used in start-up process of computer
  - Types :- 
    1)EPROM  :- Erasable Programmable Read-only memory Stores instructions, but you can erase only by exposing memory to ultraviolet light
    2)EEPROM :- Electrically Erasable Programmable Read-Only Memory, stores and deletes instructions on special circuit
    3)PROM   :- Programmable Read-Only memory type of ROM is written or programmed using a particular device
    4)MASKROM :- Contents can be programmed only by an integrated circuit manufacturer
  


 