Glavin
 Topics :-
  - What is Computer and Other Defination
  - What is OS?
  - OS Structure Type
  - OS Duties/ Function / Services
  - Types Of OS 
  - What is Spooling
  - What is System Call 
  - What is Booting
  - What is Kernel
  

 What is Computer and Other Defination?
  Computer :- General purpose device that execute sequences of instruction to perform numerical calculations and other tasks. 
  Computer Science  :- Study of computer systems and computer processes
  Computer hardware :- Collection of all physical elements of computer system 
  Computer software :- Collection of all program stored in computer system and executed by computer system

  Software             :- Collection of computer programs, libraries and related data are referred to as a software
  Application Software :- Perform task for user 
  System software      :- Operate and controls computer system and provide platform to run application software
  Computer program     :- Collection of instructions that performs specific task when executed by computer. 
  
  Algorithm   :- Computer program that performs well-defined task 
  Kernel      :- Part of OS which interacts directly with hardware and performs most crucial tasks
  Microkernel :- Support only core OS functionalities
  Shell       :- known as command interpreter which is part of OS that receives command from user and gets them executed 
  BIOS(Basic Input/Output System) :- Stored in EPROM and used by CPU to perform start-up procedures when computer is turned on.




 What is OS?
  - OS is system program that acts as interface between user and computer hardware which controls execution of all kinds of programs
    and manages all resources of computer system
  - First OS is ATLAS developed by Tom Kilburn professoor Manchester University in 1962 
    Diagram :- https://www.tutorialspoint.com/operating_system/images/conceptual_view.jpg
   Primary Goals :- Windows | Mac : Machintosh  
    - Convenience : Use Easiet way to any hardware 
    - Throughput  : Number of tasks executed per unit time  (Linux)

 


 Os Duties / Function / Services :- 

  Resource Management | Resource Governance:-
   - Manage all kinds of resources both hardware and software using Schedulers
   - Most of use in parallel processing

  Process Management | Process Execution :-
   - Load program into memory, execute it in CPU and Handle it 
   - Creating, Resuming, Suspending and Deleting Processes using various CPU Scheduling
   - Also Provide mechanism for process synchronization, Inter Process Communication(IPC) and deadlock handling 
   
  Storage/File management or Manipulation:-
   - Manage file operations like Creating, deleting and manipulating files and directories based on permission mode
   - Free space management, Storage allocation and Disk scheduling using File System

  Memory management :-
   - Allocating and deallocating memory space of Primary(Main) Memory because size limits
   - Keep track of memory to identify which part being used by which job(Process) 
   - Program must execute in Main Memory(RAM) 

  Protection | Security & Privacy:-
   - OS ensures that all access to system resources is controlled
   - Ensure that external I/O devices are protected from invalid access attempt
   - Windows use Kerberos Security Protocol
  
  I/O Operation | I/O Management | Device Management :-
   - OS Manage device communication between User and Device via their respective drivers 
   - It Keep tracks of all devices and Program that responsible for this task is known as I/O controller.

  Communication :-
   - OS also handle routing, connection strategies, problems of contention and security.
   - Both processes can be on one computer or on different computers, but they are connected through computer network
   - Communication may be implemented by two methods, either by Shared Memory or by Message Passing.

  Error Handling / Error detection :-
   - OS constantly checks errors and takes appropriate action to ensure correct and consistent computing     




 OS Structures type :-  
  
  Monolithic Architecture :-   
   - Entire OS working in kernel space 
   - Kernel provides various services such as memory management, file management, process scheduling etc. using system calls.
   - Execution is so fast and process run completely in single address space
   - It is static single binary file
   - If any service fails its lead to entire system failure and to add new services entire architecture needs to modify
   Example :- MS DOS, Unix, Linux, Open VMS, XTS-400


  Layered Architecture :-
   - OS broken into number of layers (levels) where every layer has different functionality
   - Bottom layer (layer 0) is hardware and topmost layer (layer N) is user interface
   - Each layer uses function of lower level layers only
   - All layers defined separately and interact with each other as required
   - Change in one layer specification does not affect rest of layers.
   - Layer 1 to 6:- Hardware, CPU Scheduling, Memory Management, Process Management, I/O Buffer, User Program
    Example :- Windows NT
   
    
  Microkernel Architecture :-  
   - Minimum software that is required to correctly implement an operating syste
   - Includes virtual memory, process scheduling and basic inter-process communication
   - In Microkernel Removed all non-essential components from kernel and implementing them as system and user programs
   - New services added in user space and does not require kernel to be modified which increased security and stability.
   - If any service fails then rest of operating system remains untouched. 
   Example :- MacOS, Mach, L4, AmigaOS, Minix, K42
     

  Modular Architecture :-
   - Type of kernel in which core system parts allocated in independent files called modules
   - It added to system at run time
   - Requires small amount of time for load modules
   - Needs new module then they won’t have to recompile
  

  Hybrid Kernel :-
   - Combination of both monolithic kernel and mircrokernel
   - It has speed and design of monolithic kernel and modularity and stability of microkernel.
   Example :- Windows NT, Netware, BeOS




 Types of operating systems – 
   Single process operating system    :- MS DOS, 1981
   Multiprogramming operating system  :- Dijkstra, early 1960s
   Multitasking operating system      :- CTSS, MIT, early 1960s 


  Batch Operating System | Batch Processing :-
   - Similar kind of process(Job) batch given to computer so it can execute it
   - OS define job in predefined sequence of commands, programs and data as a single unit.
   - Jobs are processed in order of submission First Come First Served(FCFS) fashion
   - There is an operator which takes similar jobs having same requirement and group them into batches.
   - When job completes its execution, its memory is released and output job gets copied into output device for later processing.
   - When job request for I/O at time CPU is Idle which is major disadvantages (Non-Preemption)
   - IBM create FORTRAN Alone with IBSYS 709X in 1960 

   Example :-
    User ---> Set Job in ROM device ---> Go to operator ---> Operator group similar job and execute 
    ---> One time one process execute (No particular time for output) ---> Output is write to disk and get to user from operator
    ---> User use output in own system for process  
     
   Diagram :- https://www.tutorialspoint.com/operating_system/images/batch_processing.jpg



  Multiprogramming :- IDLENESS
   - Multiprogramming increases CPU utilization by keeping multiple jobs(process) in main memory so that CPU always has one to execute
   - OS keeps several jobs in main memory at time and pick one jobs from its job pull using CPU scheduling
   - It is NonPre-emptive scheduling means if we give one process to cpu, cpu will complete that entire process and only after complete
     process pick another process
   - Sometime cpu will go for I/O operation at that time cpu will pick up another process from job pull So cpu IDEL time is zero   
   Diagram :- https://www.tutorialspoint.com/operating_system/images/memory_layout.jpg



  Multitasking | Time-Sharing :- Responsiveness
   - Logical extension of Multi-Programming also known as Time-sharing system
   - Sharing processor time among multiple processes by CPU Scheduling 
   - Each process given small portion of time in which process need to complete its execution
   - CPU executes multiple tasks by switching among them which Reduce CPU IDLE time
   - It is pre-emptive means Processor gives particular time for each process after than it automatically move to second process 
     but first process still available if not complete in within given time
   - Due to its fast switching Security arise with program data, data communication and its reliability 
   - Response time should be minimal
   Example :- 3 Process need to execute ---> Share processor time among them (Share is based on scheduling) (Time Quantam)
   Diagram :- https://www.tutorialspoint.com/operating_system/images/multitasking.jpg    



  Real Time operating System :-
   - Real-time operating system (RTOS) Fixed time Constraint system where time constraint matter lot and can't be delays
   - Time taken by system to respond input and display required updated information is termed as response time   
   - VxWorks, QNX & RTLinux are real-time operating systems and Palm OS is a mobile operating system for Personal Digital Assistant(PDA) 
   Example :- Embedded systems, Robotics, Scientific utilities, etc.
    
   Types :-
    Hard-Real Time System :- Critical tasks needs to complete on time there no place for delays 
    Soft-Real Time System :- Less restrictive with limited utility than hard-real time system



  Distributed Operating System | Cluster :-
   - Multiple Processors serve Multiple applications to multiple users using Central Processor
   - Processor communicate with each other through various communication lines like network connection which referred as loosely coupled
   - OS distribute computation logics among several physical processors
   - Reduction of delays in processing and loading on host computer
   - Processors do not share memory instead each processor has its own local memory, storage etc...
   - Main advantage is availability, if any system fail another load balancing that system so its improved Scalability     
   - If Processors connect with local network (Single network) like Single server it is called "Cluster Operating System"


 
  Embedded Systems :-
   - Work on fixed machine like A.C.
   - You can't customally change its functionality  



  Network Operating System :-
   - Runs on server computer and provides server capability to manage application, user data and other networking functionality
   - Purpose to allow shared file and printer access among multiple computers in a network, 
     typically local area network (LAN), private network or to other networks.
   - Centeralized Server so security managed and software upgrade easily and enable remote access 
   - Dependency on central server, High cost , Regular maintenance and update are some disadvantages




 Spooling(Simultaneous Pheripheral Operations Online) :- 
   - Different Pheripheral devices(I/O Device) can run simultaneously 
   - Provide buffer area in secondary memory to save CPU time and user not need to wait for I/O process
   Diagram :- https://www.tutorialspoint.com/operating_system/images/spooling.jpg
 



 What is SystemCall :-
  - To use system functionality we need to go in kernel mode because we only can access user mode
  - System call is mechanism using which user program request kernel to access system functionalities
  - User program invokes system call when it require such services like accessing I/O devices and communicating other programs.


  Type of System Call :- 
   E.x. :- Fork, exec, getpid, getppid, wait, exit
    File                        :- Open, read, write, close, create file
    Device                      :- Read, write, Repoisition, 
                                   iocte(manipulates underlying device parameter of special files) 
                                   fcnte (access point for several advanced operations on file descriptors)
    Security                    :- chmod(Chagen Privilege Mode), umask
    Process Control             :- load, abort, execute, fork, wait, signal, allocate
    Information                 :- getpid, attribute, get system data
    Inter-Process Communication :- Pipe, shmget(Get Shared Memory), create/delete connection
  
   Fork :-
    - In UNIX Fork() Create child process of parent process
    - Returns process ID which is generally process id of child process
    - Return value 0 :- Child process , 1 :- Parent process, -1 : if child process not created
    - Formula :- 2N-1 (Parent process) | 2N (Child process)

   Exec :- exec replace current process with another (different) one

   Wait :-
    - Used by parent process to determine termination of child process
    - Parent process uses Wait() system call and gets exit status of child process as well as PID of child process which is terminated 
 

  Dual-mode operation :-
   - User mode 
   - Kernel mode | supervisor mode | system mode | privileged mode 
   Mode bit :-  0 : Kernel, 1 : User 

   Example :- 
    User Mode                                                                 Mode Bit = 1
        User Process Executing --> Get System Call \                / Return From System Call
                                                    \ 1 trap     1 / 
    ----------------------------------------------------------------------------------------------------
                                                      \ 0      0 /
    Kernel Mode                                   Execute System Call        Mode Bit = 0 
              
    - All core functionality are executed in kernel mode  




 What is Booting :-
  - Booting is process of starting computer and loading kernel.
  - When computer power is turned on then cpu will move to BIOS(Basic Input Output System) in ROM 
  - BIOS run process power-on self-test (POST) which check all hardware
  - On POST process successful BIOS load MBR(Master Boot Record) to RAM
  - Now MBR load bootstrap loader to RAM
  - bootstrap loader loads OS, Kernel and much more in RAM
  
  Types :- 
    Hard Booting - Power On system
    Soft Booting - Restart / Ctrl + Alt + Del twice




 What is Kernel :- 
  - Kernel is core central component of an operating system that manages all operations of computer and hardware. 
  - It acts as bridge between applications and data processing performed at hardware level using IPC and system calls.

  Objectives of Kernel :
   - Establish communication between user level application and hardware
   - Decide state of incoming processes
   - To control disk management, memory management, task management

  Types of Kernel :- 
   Monolithic, Microkernel, Hyperkernel in OS Structure Type