I/O Management :-
 - I/O devices vary widely in function and speed
 - I/O Subsystem separate kernel from complexities of managing I/O Device
 - Device driver provide device access interface to I/O subsystem

 I/O Performing Mode :- Polling(Busy-waiting) | Interrupt | DMA | Cycle Stealing | Direct Virtual Memory Access
 Service I/O System  :- I/O Scheduling | Buffering | Caching | Error Handling | I/O Protection | Spooling 

 Types of device :- 
  Block     :- Driver communicate by sending entire blocks of data 
  Character :- Driver communicate by sending and receiving single character

 Diagram :-
                    Kernel                        # 1 to 3 Software
              Kernel I/O Subsystem
  Device Driver-1     ... Device Driver-N
  Device Controller-1 ... Device Controller -N    # Hardware
      Device 1            Device - N

 Port :- Connection point where device connected(I/O port - Status Register | Control Register | Data-in/Out Register)
 Bus  :- Set of wire transfer data and control information
 Controller :- Control port on device



I/O Architecture :-
 - I/O software device independent and possible to write program that access I/O device without specify device 
 User Level Libraries :- Provide interface to user program to perform input and output Ex :- stdio C/C++
 Kernel Level Modules :- Provide device driver to interact with device controller and device independent I/O modules 
 Hardware :- Include hardware and its controller to interact with device driver and make it alive

 Diagram :-
  User      User I/O Libraries
  Kernel    Device Independent I/O
            Device Driver 
  Hardware  Device Controller
            Device 
    
 
 Device Drivers :-
  - Software modules that plugged into OS to handle particular device 
  - Encapsulate device-dependent code and device-specific register for reads/writes
  - Device driver written by device manufacturer and delivered along with device on CD-ROM
  
  Device driver Process :-
   - Accept request from device independent software above to it
   - Interact with device controller I/O and perform required error handling
   - Make sure that request executed successfully


 Device Controller :-
  - Interface between device and device driver 
  - I/O unit like Keyboard contain mechanical or electronic component(EC) called Device Controller
  - Convert serial bit stream to block of bytes to perform error correction as necessary
  - Device connected either by plug or socket and socket connected to device controller
  - CPU and device controllers use common bus for communication


 Synchronous vs Asynchronous :-
  Synchronous  I/O  - CPU execution waits while I/O proceeds
  Asynchronous I/O  - I/O proceeds concurrently with CPU execution
 
 

Types of Communication with I/O Devices :-
 Special Instruction I/O :- Controlling I/O device | Sent data to I/O device or read from I/O device

 Memory-Mapped I/O :-
  - Same Address space shared by memory and I/O devices
  - Device directly connect memory location so that I/O device transfer data block to memory without going through CPU
  - OS allocate buffer in memory and inform I/O device to use that buffer to send data to CPU 
  - I/O device operates asynchronously with CPU and interrupts CPU when finished
  
 Direct Memory Access (DMA) :-
  - Reduce hardware overhead interrupt
  - CPU grant I/O module authority for read or write to/from memory without involvement 
  - DMA Access hardware called DMA controller(DMAC) that manages data transfers and access to system bus 



Kernel I/O Subsystem :-
 
 Scheduling :- Kernel schedules set of I/O requests in ordert to determine in which to execute them 
 Buffering  :- Store data while transferred between two device | Slove speed mismatch between producer and consumer 
 Caching    :- Hold copies of data | Access cached copy more efficient than access original
 Error Handling :- Protected memory against many kinds of hardware and application error

 Spooling and Device Reservation :- Spool buffer holds output for device such as printer

 Polling I/O :- 
  - I/O device communicate with processor for checking device status for next I/O operation 
  - I/O device put information in Status register then processor come and get information
  - Inefficient method and much of processors time wasted on unnecessary polls
  
 Interrupts I/O :-
  - Interrupt signal to microprocessor from device that require attention
  - Device controller put interrupt signal on bus when it need CPUâ€™s attention when CPU receive interrupt 
  - It save its current state and invoke appropriate interrupt handler using interrupt vector 
    (OS address routine to handle various event) 
  - When interrupting device CPU continues with its original task as it had never been interrupted
 
 Interrupt handlers(Interrupt Service Routine - ISR):-
  - Function in OS or Device Driver whose execution triggered by reception of interrupt
  - In order to handle interrupt update data structure and wake up process that was waiting
  - Interrupt mechanism accept address(Number that select specific interrupt handling routine/function from small set) 
  - This address offset stored in interrupt vector table(Vector - Memory addresses of specialized interrupt handler)
  