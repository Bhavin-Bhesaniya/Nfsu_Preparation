Process, Thread and Scheduling Algorithm
 
Topic :-
 - What is Process? Its Creation and Termination
 - Process State
 - PCB(Process Control Block)
 - Process Scheduling
 - Context Switching
 - Inter-Process Communication
 - Thread
 - Scheduling Algorithm




Process? Its Creation, Section and Termination :- 
 
 Process Creation :-
  - When user started executing program it become process 
  - Program is passive entity resides in secondary memory while procrss is active entity  
  - It is dynamic instance of program
  - Process may have new program or may be duplicate of its parent process(Same code or data)
  - Each process has unique id which obtain resources either from operating system directly or from its parent process
  - Each process has its own address space which contains code, data, stack and heap segments
  
 
 Types of processes :- 
  - Independent Process 
  - Co-operative process
  Root Process    :- Kernal is first process created or say Root process of process tree 
  Zoombie process :- Process terminated but still exists in PCB because parent not yet accpted its return value  
  Defunct process :- Process which completed their execution by exit() system call but still entry in Process Table 


 Process divided into four section :-
  Stack : Contain temporary data such as method/function parameters, return address and local variables
  Heap  : Dynamically memory allocation(Malloc, Calloc, Dalloc) for process during Run Time
  Data  : Contain global and static variable
  Text  : Contains executable instructions of program, read-only and shareable


 Process termination :- 
  - Deletation of process or removing process from PCB 
  - Parent process terminate child process If it exceeded its resource usage or its results is no more needed
  - Process terminated normally by completing its task or because fatal error or killed by another process or forcefully killed by user




Process State :-
 - Specify current process activity as process execute its state changes
 - Each process represented by Process Control Block(PCB) also called Task Control Block

 State :-
  New   :- 
   - Initial state where process first created/started in secondary memory(ROM)(Job Queue)
  
  Ready :- 
   - Long-term scheduler load Process from secondary memory to main memory(RAM)(Ready Queue)
   - Where process is waiting to be assigned to processor(CPU)
   - Multiprogramming means number of processes are in ready states to increases CPU utilization

  Running :- 
   - Short-term scheduler assign process from ready state to CPU 
   - CPU execute process instructions
   - Sometime switch process to ready state when high-priority process is given by ready state or process exceeded 
     time limit/Time quantum(Round-Robin)
   - If process request for I/O transfer to waiting state
  
  Waiting :- 
   - Process in these state wait for resource such as waiting for user input or I/O operation
   - After complete process its moves into ready state not running 
   - If no of process I/O request increase and (Device queue) is full it moved into suspended state known as ROM
   
  Terminate :- 
   - Once process finishes its execution it terminated by OS and deallocating all resources 




PCB(Process Control Block) :-  
 - PCB is data structure maintained by Operating System for every process using process ID
 - Entry of all PCBs of current processes is in Process Table 
 - Process Table has status of each and every process that is created in OS along with their PIDs

 PCB Process Information :-
  Pointer :- Stack pointer that required saved when process switched from one state to another to retain position
  Process State    : Store respective state of process
  Process ID       : Identifier of process
  Program Counter  : Store counter which Address next instruction executed for this process
  CPU Register     : Process stored for execution(Running state)
  Open File list   : List of all open file for process
  Memory Management Information : Include Page table, segment table etc.

   Miscellaneous :-
    Process Privileges          : Allow/Disallow access to system resources
    CPU scheduling information  : Process priority, other scheduling information, etc. 
    Accounting information      : Include amount of CPU used for process execution, time limits, execution ID 
    I/O status information      : List of I/O devices allocated to process
  



Process Scheduling :-

 Scheduling queues :-
  - OS maintenance all PCBs in Process Scheduling queues to perform process scheduling
  Job Queue     - As Process enter in system put in job queue which keeps all processes in system 
  Ready Queue   - Process that residing in memory are ready for execution are kept in ready queue
  Device Queue  - Process waiting for particular I/O resource are kept in device queue



 Types of Schedulers :-
    
  Long-term Scheduler(Job Scheduler) :-
   - Select process from Job Queue and load them into memory for execution using multi-programming
   - LTS select proper mix of CPU-bound(Computation in CPU) process and I/O-bound(Computation in I/O) process
   - Multi-tasking OS like Unix and windows not use LTS as they put all new processes in memory for short-term scheduler
    


  Short-term scheduler(CPU Scheduler) :- 
   - Select process from ready state(Ready Queue) and allocate it to CPU
   - CPU Scheduler invoked when process switch from running state to waiting state OR terminates OR ready state
   - Dispatcher give PCB information of selected process to cpu to execute process and take decision of which process
     to execute next
   - Time taken by Dispatcher is known as Dispatcher Latency
   - MS-DOS not support multi-programming hence No cpu scheduling



  Medium-term scheduler(Swapping):- 
   - Invoked when waiting state is full(device queue) due to lots of I/O request
   - Need to move process in suspended state
   - Remove suspended process from RAM to secondary storage its called Swapping
   - After complete I/O operation process join waiting state if space in waiting state otherwie wait for some time



 Types of Scheduling :-
  Non-Preemptive scheduling | Co-Operating scheduling :-
   - Process keeps in cpu until it terminates(Complete) also known as multiprogramming
   Ex :- Windows 3.1X

  Preemptive scheduling :- 
   - Process forced to leave cpu and switch to ready queue due to high-priority process or time quantum
   Ex :- Unix, Linux, Windows 95 or Higher   

 
 
 - Windows uses round-robin technique with multi-level feedback queue for priority scheduling 
 - Linux uses Completely Fair Scheduling(CFS) algorithm, which implementation of Weighted fair queueing(WFQ)
 - Rate-monotonic scheduling algorithm(RM) is by far most used real-time algorithm and one of the easiest policies 
   to implement




Context Switching :-       
 - Store and restore process state in PCB so that process execution resumed from same point at later time
 - Multitasking OS enable multiple processes to share single CPU
 - When scheduler switch process from executing one to another, state of current running process stored into PCB 
   At time second process can start executing
 - To avoid amount of context switching some hardware system allow two or more sets of processor registers
 
 Information Stored During Switching:-
  - Changed State
  - Program Counter
  - Base and limit register value
  - Currently used register
  - Scheduling, I/O State, Accounting information



 
Inter-Process communication (IPC):-
 - Allow processes to communicate with each other and synchronise their actions without using same address space. 
 - IPC can be achieved using shared memory and message passing
 
 Reason to use IPC :-
  - Information sharing
  - Computational Speedup
  - Modularity 
  - Convenience
  - Process synchronization  
  
 Pipe :-
  - Communication medium between two or more related or inter-related processes
  - Either within one process or communication between child and parent processes
  - Filling process means writing into pipe and reading process is retrieving from pipe
  



Thread :-
 - Smallest sequences of instructions that independently managed by CPU scheduler
 - Multiple-Thread exists within same process, executing concurrently and share resources such as memory
 - Process thread share its instructions(Executable Code) and context(value of its variable at given any moment)
 - Thread contain thread ID, Program Counter, register and stack
 - Fork() is system call which used to generate child process(Process clone) :- 2(^n)-1 
 - Win32 thread library used by windows


 Difference Between Process and Thread :-
      Topic                       Thread                        Process
  Context Switching      Faster                        Slower
  System Call Invovled   No                            Yes
  Independent            Part of process so dependent  Yes
  State Information      less than process             More than thread
  Blocking               Block entire process(I/O)     Not block another process
  OS Treating            User thread as single task    Differently
  Share                  Share same Data and code      Different address, data, code
                         but stack,registers different  
     


 Advantages of Multi-Thread Programming :-
  - Responsiveness so program Faster execution 
  - Better resource utilization
  - Easy communication 
  - Parallelization



 Types Of Thread:-

  User Level:-
   - User manage thread where kernel not aware of thread existence so not require kernel mode privileges
   - pthread.h Thread library manage code for creating, destroying, passing message and data between threads, 
     scheduling thread execution and saving and restoring thread context
   - Use in application program
  
  Kernel Level :-
   - Kernel maintain context information for process as whole and for individuals threads within process
   - Kernel perform thread creation, scheduling and management in Kernel space using system call
   - Simultaneously schedule multiple thread from same process on multiple processes
  
  Difference :- 
                      User level                  Kernel level 
   Managed             User                        OS
   Speed to create     Faster                      Slower
   Context Switching   Faster                      Slower
   Perform Blocking    Block entire process        Not Affect Other
   Platform            Independent run any OS      OS Specific
   Multi-Thread        Can't take advantage of     kernel routine themselves multithreaded 
                       multiprocessing
  


 Multi-threading Models :- 
  - Combination of User level thread and Kernel level thread 
  - Combined Threads in parallel on multiple processors and blocking system call not block entire process
   
  Many To Many Model :- Best
   - Multiplexes any number of user threads into equal or smaller number of kernel threads so parallel run
   - Best accuracy and concurrency when thread perform blocking system call kernel schedule another thread forexecution  
   Ex:- Solaris

  
  Many To One Model :-
   - Many user level thread mapped into one Kernel-level thread which handle by user level thread in user space
   - When thread makes blocking system call, entire process will be blocked
   - One thread access Kernel at time so multiple thread are unable to run in parallel on multi-processors
   - If user-level thread library not support by OS these mechanisms use
   
  
  One To One Model :-
   - one-to-one relationship of user-level thread to kernel-level
   - More concurrency than many-to-one model
   - Allow other thread run when thread makes blocking system call
   - Support multiple threads to execute in parallel on microprocessors
   - Disadvantage of this model is that creating user thread requires corresponding Kernel thread
   Ex :- Linux, Windows 95 to XP




Scheduling Algorithm :-
 - Gantt Chart(Henry Gantt) Use to sloveing numerical calculation
 - These algorithms either Pre-emptive or Non-Preemptive

 Scheduling Criteria :-
  ↑ CPU utilization  - As busy as possible (0 to 100 percent), in real life 40(normal) to 90 (heavy) usage 
  ↑ Throughput       - Number of processes that are completed per unit time 
  ↓ Turnaround time  - Time from submission to completion(Time Spent in different queue + CPU + in different I/O device)
  ↓ Waiting time     - Time spent in ready queue 
  ↓ Response time    - Time from submission to first response


 Time Terms :-
  Arrival Time    - Process enter Ready Queue or State            (Enter Process)     11 : 00
  Burst Time      - Time required by process to execute on CPU    (Duration)          15 min
  Completion Time - Process complete its execution                (Leave Process)     12 : 00
  Turnaround Time - Completion time - Arrival Time                                    (12-11) = 1 hour
  Waiting Time    - Turnaround time - Burst Time                                      (11-15) = 45 min 
  Response time   - Time from submission to process get CPU first time - Arrival Time (11.30 - 11) = 30 min   



 First-Come First-Served(FCFS) Scheduling :-
  - Non-Preemptive
  - Poor performance and average waiting time is high
  Convoy Effect - Small processes need to wait if large process given to cpu   
   
  Criteria :- Arrival Time : Check Who Come First Use in Gantt Chart

  Example :-
   Process No. | Arrival Time | Burst Time(Execution Time) | Completion Time | TAT(Turnaround Time) | WT(Wait Time) | Response time(RT) 
    p1             0                2                            2              2                     0             0
    p2             1                2                            4              3                     1             1  
    p3             5                3                            8              3                     0             0
    p4             6                4                           12              6                     2             2

   Gantt  :-  | p1 |  p2  |  CPU IDLE |  p3  | p4  |         # CPU Starting from 0  
              0    2      4           5      8     12

   Average Turnaround Time :- 2 + 3 + 3 + 6 = 14/4 = 3.5
   Average Waiting Time    :- 0 + 1 + 0 + 2 = 3/4  = 0.75 




 Shortest-Job-First(SJF) Scheduling :-
  - Non-Preemptive 
  - Optimal but cannot be implemented

  Criteria :- Process with smallest Burst Time(Execution Time)

  Example :-
   Process No. | Arrival Time | Burst Time(Execution Time) |Complete Time | TAT(Turnaround Time) | WT(Wait Time) | Response time(RT) 
    p1             1                3                            6              5                     2             2
    p2             2                4                           10              8                     4             4  
    p3             1                2                            3              2                     0             0
    p4             4                4                           14             10                     6             6

   Gantt  :- 
    | CPU Idle |  p3  |  p1  |  p2  |  p4  |          # First check which process arrived than check lowest burst time
    0          1      3      6      10     14
      
   - Two process have same Arrival Time burst time check
   - Not same Arrival Time but already in queue check burst time
   - When both burst time and arrival time same check lower process ID

   Average Turnaround Time :- 5 + 8 + 2 + 10 = 25/4 = 6.25
   Average Waiting Time    :- 2 + 4 + 0 + 6 = 12/4  = 3




 Shortest Remaining Time First(SRTF) (SJF With Pre-emption) :-
  - Pre-emptive 

  Criteria :- Burst Time(Execution Time)

  Example :-
   Process No. | Arrival Time | Burst Time(Execution Time) | Complete Time | TAT(Turnaround Time) | WT(Wait Time) | Response time(RT) 
    p1             0                5                            9              9                     4             0
    p2             1                3                            4              3                     0             0  
    p3             2                4                           13             11                     7             7
    p4             4                1                            5              1                     0             0

   Gantt  :- | p1 -4 | p2 -2 | p2 -1 | p2 0 | p4 0 | p1 0 | p3 0|        
     Cpu  :- 0       1       2       3      4      5      9     13 
 
   - Starting from 0 and check lower arrival time with 1 execution time
   - If any other lower process arrive and which burst time is lower than previous process add it in cpu otherwise continue old process
   - Last execution time known as completion time

   Average Turnaround Time :- 24/4 = 6 
   Average Waiting Time    :- 11/4 = 2.75 




 Round-Robin Scheduling :-
  - When process in ready queue select it and move in cpu(Running Queue)
  - RR Scheduling cpu use time quantam and within time if finish terminate process otherwise send back in running state
  - Here maintenance required on ready queue also 

  Criteria :- Time Quantam Use(Pre-emptive)

  Example :-
   Process No. | Arrival Time | Burst Time(Execution Time) | Complete Time | TAT(Turnaround Time) | WT(Wait Time) | Response time(RT) 
    p1             0                5                           12             12                     7             0
    p2             1                4                           11             10                     6             1  
    p3             2                2                            6              4                     2             2
    p4             4                1                            9              5                     0             4

   Time Quantam :- 2 
  
   Ready Queue :- | p1 | p2 | p3 | p1 | p4 | p2 | p1     # Check process in ready queue or not if yes add in cpu
     Cpu       :- 0    2                                 # If process not completed bring back to ready queue but check p4 arrival    

   Running     :- | p1 -3 | p2 -2 | p3 0 | p1 -1 | p4 0 | p2 0 | p1 0|
     Cpu       :- 0       2       4      6       8      9     11    12
          
   - How many time context switches happern :- Not calculate first and last cpu time | :- Ans : 6 | 

   Average Turnaround Time :- 29/4 = 7.25 
   Average Waiting Time    :- 15/4 = 3.75     




 Priority Scheduling :-
   
  Pre-emptive Priority Scheduling :-
   
   Criteria :- Priority Use in Gantt Chart

   Example :-
    Priority Process No  Arrival-Time  Burst Time(Execution Time)  Complete Time  TAT(Turnaround Time)  WT(Wait Time)  Response time(RT) 
    10           p1            0                5                       12             12                     7             0
    20           p2            1                4                        8              7                     3             0  
    30           p3            2                2                        4              2                     0             7
    40           p4            4                1                        5              1                     0             0

   Gantt :-  | p1 -4 | p2 -3 | p3 -1 | p3 0 | p4 0 | p2 0 | p1 0 |    # After process its burst time
   Cpu   :-  0       1       2       3      4      5      8      12
    
   - Higher no higher priority (40)
   - Two process in ready queue check priority
   - Process with higher priority process here
   - 2 process have same priority and same arrival time use process Id sequence

   Average Turnaround Time :- 22/4 = 5.5 
   Average Waiting Time    :- 10/4 = 2.5 



  Non-Preemptive Priority Scheduling :- 
   Example :-
    Priority Process No ArrivalTime  Burst Time(Execution Time)  Complete Time  TAT(Turnaround Time)  WT(Wait Time)  Response time(RT) 
     2           p1            0                4                       4              4                    0              0
     4           p2            1                2                      25             24                   22             22  
     6           p3            2                3                      23             21                   18             18
    10           p4            3                5                       9              6                    1              1
     8           p5            4                1                      20             16                   15             15
    12           p6            5                4                      13              8                    4              4  
     9           p7            6                6                      19             13                    7             7
    
   Gantt  :-  |  p1  |  p4  |  p6  |   p7   |   p5   |   p3   |   p2   |  
   Cpu    :-  0      4      9      13      19       20       23       25



  Pre-emptive Priority Scheduling with I/O And CPU burst Time:-
   Criteria :- Priority Use in Gantt Chart

   Example :-
    Priority Process No ArrivalTime  Cpu Burst Time | I/O Burst Time | CPU  | Complete Time  
     2           p1            0           1              5            3          10
     3           p2            2           3              3            1          15
     1           p3            3           2              3            1           9
     4           p4            3           2              4            1          18

   Gantt :-  |  p1  C1-0  |  CPU IDLE  |  p2  C1-2 |  p3  C1-1 |  p3 C1-0  |  p2  C1-1  |   p1  C2-2 |  p1  C2-1 |      
   Cpu   :-  0      SI    1            2           3           4      SI   5            6   CI       7           8

             |  p3  C2-0  |  p1 C2-0   |  p2  C1-0 |  p4  C2-0 |  CPU IDLE |  p2 C2-0   |   CPU IDLE |  p4 C2-0  |    
             8    CI      9           10      SI  11     SI   13          14           15           17          18 




 Multi-level Queue Scheduling :-
  - In real life when we have different types of processes so why single ready queue is used
  - There will be different queues must be for every process
  - Every process will have it own algorithm
   
  StarVashion :- If higher priority proces arise than lower level process not executed at time to solve it multi-level queue feedback use
   
  Inter-Queue Scheduling :- Pre-emptive priority scheduling or RR(80% time for foreground processes and 20% time for background processes)
   
  Diagram :- 
    Highest Priority ---> System Process  --> Round-Robin  ------|
                                                                 |
    Medium Priority  ---> Interactive PS  -->    SJF       ---[ CPU ]      
                                                                 |  
    Lowest Priority  ---> Batch Process   -->    FCFS      ------|




 Multi-level Feedback Queue Scheduling :-
  - Lowest priority process give feedback and it slowely update and execute
  - If process completed remove it from queue otherwise give feedback and push to higher priority 
  - If process uses too much CPU time it will be moved to lower priority queue 
  - Aging prevent StarVashion



 LRTF(Longest Remaining Time First) Scheduling :-

 Highest Response Ratio Next(HRRN) Scheduling :-  