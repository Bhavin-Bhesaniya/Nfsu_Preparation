Database Defination :-
 - Database is a collection of inter-related data which helps in efficient retrieval, insertion and deletion of data from database and organizes 
   the data in the form of tables, views, schemas, reports etc.

Database Management System: The software which is used to manage database such as Mysql, Oracle Etc..
			  - Perform DDL, DML, Data Retrival, User Administration
		

DDL(Data Definition Language) :-
 - DDL which deals with database schemas and descriptions, of how the data should reside in the database.
 Ex : Create, Alter, Drop, Truncate, Comment, Rename

DML (Data Manipulation Language) :- 
 - DML deals with data manipulation and includes most common SQL statements such SELECT, INSERT, UPDATE, DELETE, MERGE, CALL, EXPLAIN PLAN, LOCK TABLE
 - It is used to store, modify, retrieve, delete and update data in a database.

Data Retrieval :-
 - It helps in retrieval of data from the database which can be used by applications for various purposes

User Administration :- 
 - It helps in registering and monitoring users & performance, enforcing data security, maintaining data integrity, dealing with concurrency control 
   and recovering information corrupted by unexpected failure.

File System  :- manages data using files in hard disk.
  
 Issue With File System :-
 Redundancy of data   :- Data is said to be redundant if same data is copied at many places.
 Inconsistency of Data:- Data is said to be inconsistent if multiple copies of same data does not match with each other.
 Difficult Data Access:- A user should know the exact location of file to access data, so the process is very cumbersome and tedious. 
 Unauthorized Access  :- File System may lead to unauthorized access to data. 
 No Concurrent Access :- The access of same data by multiple users at same time is known as concurrency
 No Backup andRecovery:- File system does not incorporate any backup and recovery of data if a file is lost or corrupted



----------------------------------------------------------------
Introduction of 3 tier-architectures in DBMS :- Image

 1)Physical Level   :- Describes how the data is being stored in secondary storage devices and storage details 
 2)Conceptual Level :- Describes data is represented in the form of various database tables 
                    -  Referred as logical schema,it describes what kind of data is to be stored in the database.
 3)External Level   :- Describes Data abstraction


Data Independence :- 
 - Change of data at one level should not affect another level
  1)Physical Data Independence :- Change in the physical location of tables and indexes should not affect the conceptual level or external view of data by DBMS
  2)Conceptual Data Independence :- a change in conceptual schema should not affect external schema


Phases of database design :- 
 1)Requirements :- Database designing for a real-world application starts from capturing the requirements to physical implementation using DBMS software
 2)Conceptual Design :- The requirements of database are captured using high level conceptual data model. Ex :- ER model
 3)Logical Design :- Represents data in the form of relational model
 4)Physical Design :- Data in relational model is implemented using commercial DBMS like Oracle, DB2

 Advantages :-
 - Minimized redundancy and data inconsistency
 - Simplified Data Access
 - Multiple data views
 - Data Security
 - Concurrent access to data
 - Backup and Recovery mechanism



----------------------------------------------------------------
DBMS Architecture 2-Level, 3-Level

Two Tier Architecture :-
 - The application at the client end directly communicates with the database at the server side. 
 - APIâ€™s like ODBC,JDBC are used for this interaction. 
 - The server side is responsible for providing query processing and transaction management functionalities. 
 - advantage of this type is that maintenance and understanding is easier, compatible with existing systems but not good for LargeScale data


Three Tier Architecture :-
 - The client does not directly communicate with the server. 
 - It interacts with an application server which communicates with the database system and then the query processing and transaction management takes place.
 
 Advantages :-
 - Enhanced scalability due to distributed deployment of application servers
 - Data Integrity is maintained
 - Security is improved. Reducing access to unauthorized data

 Disadvantages :-
 - Increased complexity of implementation and communication



----------------------------------------------------------------
Need Of DBMS :-
 1)Processing Queries and Object Management
 - traditional file systems, we cannot store data in the form of objects
 - In DBMS, Application level code needs to be written to handle, store and scan through the data in a file system gives us the ability to query the database.

 2) Controlling redundancy and inconsistency
 - Redundancy refers to repeated instances of the same data where dbms provides redundancy control 
 - A DBMS uses data normalization to avoid redundancy and duplicates

 3) Efficient memory management and indexing :-
 - In DBMS ,object indexing takes place efficiently through database schema based on any attribute of the data or a data-property
 - This helps in fast retrieval of data based on the indexed attribute

 4) Concurrency control and transaction management :- 
 -  A DBMS implements ACID(atomicity, durability, isolation,consistency) properties to ensure efficient transaction management without data corruption.

 5) Access Control and ease in accessing data :-
 - A DBMS can grant access to various users and determine which part and how much of the data can they access from the database thus removing redundancy

 6) Integrity constraints :-  Data stored in databases must satisfy integrity constraints.

 7) Multiple User Interface :-

 8)Data scalability, expandability and flexibility :-
 - change one schema that of the database, all schema update according to it

 9)Security :-



----------------------------------------------------------------