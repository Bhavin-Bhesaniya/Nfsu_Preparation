What is System :-
 - System is group of element or component which work together to accomplish common task

 Characteristic :-
  - Organize | Integration | Interaction | Interdependency | Central objective

 Elements :- 
  - Input and Output | Processor | Control | Feedback | Boundaries & Interface | Environment

 Types :-
  Physical or Abstract | Open or Closed | Adaptive or Non-adaptive | Permanent or Temporary | Natural or Manufacturer



What is System analysis and Design :-
 - It is systematic, discplined, cost-effective technique for software development
 - Engineering approach to develop software
 - Study in which we learn how to analyze existing system and create better one

 Evolution :-
  1945-65 --> Origin,
  1965-95 --> Crisis, OS/360 - Multi-million failure
  1990-2000 --> Internet,
  2000-2010 --> Light Weight,
  2010-Till --> AL,ML, DL


What is System Analysis :-
 - Process of studying and observing system to know how it works and to identify its goal and purposes

What is System Design :-
 - Process of planning new system or replacing existing system

What is Software Design :-
 - Process of designing elements of software such as architecture, modules and components, different interfaces
   of those components and data that goes into it
 - Transfer user requirement into some suitable form, helps programer in software coding and implementation  
 Principal for system design :-
  - Problem Partitioning / Decomposition
  - Abstraction
  - Modularity
  - Top-down and Bottom-up approach
 - Coupling is Degree of interdependence between software modules(Show relationship between modules)
   Types :- Uncouple, Loosely Couple, Highly couple 
 - Cohesion is measure of strength of relationship between different functionalities within modules  




SDLC(Software Development Lifecycle) :-
 - Planning             (Requirment Analysis)
 - Defining / Analysis  (Feasibility Study, Cost, Benefits)
 - Designing            (SRS - Software Requirment Specification document)
 - Coding / Implementation
 - Testing
 - Deploy / Maintenance


Feasibility Study :-
 - Study that reveal whether project is feasible or not
 - Do we have required resources and technologies to build project
 - Profit from project
 Types of Feasibility Study :-
  Technical | Economic | Legal | Operational | Scheduling



SRS document :-
 - Detailed description of software system to be developed with its functional and non-functional requirement
 - Requirment customer is functional and non-functional provide Company
 - SRS document contain all logical details like how software will look like, which language is used,
   database design, modular design
 - Formal report, which acts as representation of software
 - Serves as contract between customers and company


Structured analysis :-
 - Use graphical diagram to develop and portray system specifications that are easily understood by customers
 Tools :-
  DFD(Data Flow Diagram) | Data Dictionary | Structure English | Pesudo Code | Decision Tree | Decision Table
 - Concept of decomposing problem into several well-organized elements of solution know as Structured Design
 


DFD (Data Flow Diagram):-
 - Also known as Bubble Chart
 - Show flow of data between various elements of system in graphical form
 Symbols :- Circle - Process | Open Rectangle - Data Store |  Rectangle - Entity | Arrows - Data Flow
 Levels  :- 
  0-Level DFD - Show system as single process with its relationship to external entities
  1-Level DFD - Decompose 0 level-DFD into multiple components and define each component in details
  2-Level DFD - Decompose 1 level-DFD into more details 



Data Dictionary :-
 - Contain metadata about database such as what in database, who allowed to access where database physically store
 - Name of all databases table, constraint etc..
 - Gives well structured and clear information about database 
 


ER-Model Entity Relationship Model :-
 - Graphical approach for designing database
 - Generate abstract diagram of system data and that diagram used in designing relational database
 - Developed by peter chen in 1976  



ERD Entity Relationship Diagram :-
 - Diagram that generated by ER-Model is known as ERD 
 - Show relationship of different entities stored in database
 - Logical structure of database
 ER Diagram Component :-
  Entities  :- Real world object or concept about which you want to store information | Represent using Rectangle shape
  Attribute :- Properties or characterisitc of entity,                                | Represented using oval shape
  Relationship :- Specifies how entities are associated with each other               | Represent using diamond shape  
 Types :-
  Strong :- Doesn't depends on any other entity to exist
  Weak   :- Depend on other entity to exist 



Information Gathering :- 
 - Art and science of collecting information regarding present system
 Tools :- Document Observation | On-site Observation | Interviewing | Questionaries 



Decision Tree and Decision Table :-
 - DC is graph which uses branching method in order to display all possible outcomes of any decision
 - Show condition and their alternative actions within horizontal tree framework
 - Decision table is just tabluar representation of all conditions and actions
 Component of Decision Table :-
  Condition Stub :- list all condition to be checked
  Action Stub    :- List all actions to be carried out to meet such condition
  Condition Entry :- Provides answers to question asked in condition stub Quadrant
  Action Entry   :- Provide appropriate action resulting from answers to condition
  Diagram :- 
    Condition Stub   |   Condition Entry
    ------------------------------------
    Action Stub      |   Action Entry



Classical WaterFall Model :-
 - Arrived in 1970 
 - Each phase must be completed before next phase begin and there is no overlapping in phase
 - Linear sequential life cycle model

 Stages of Model :-
  Requirment Gathering
  Feasibility Study                     - Technically and Financially project is feasible or not(Able to create)
  Design                                - Design project layout and Diagram
  Coding and Unit Testing               - Code design screen and test
  System Testing and Integration        
  Maintenance

 Advantages    :- Base model  | Simple and Easy | Small Project  | Rigid
 Disadvantages :- No Feedback | No Experiment   | No Parallilism | High Risk |  60% Effort Maintenance 



Iterative WaterFall Model :-
 Stages of Model :-
  Feasibility Study                     
  Requirment Analysis and Specification 
  Design                                
  Coding and Unit Testing               
  System Testing and Integration        
  Maintenance

 - Major change is Provide feedback 
 - Feedback means if one stage find error its move to previous model for error correction



Prototyping Model :-
  Diagram :-
  Prototype Development
            Requirment Gathering
                  |
              Quick Design
    Refinement
    Suggetion               Build Prototype
    Incorporating                        
                    
                 Customer
                 Evaluation 
  Iterative
  Development       Design
                    Implement
                    Test
                    Maintain 
 
 - Customer not clear with idea                    
 - Throwaway model (Dummy Model)
 - Good for technical and Requirment risks 
 - Increase in COST of development



Incremental Model :-
                Build 1 -> Design and Deployment -> Testing -> Implementation   
  Requirment -- Build 2 -> Design and Deployment -> Testing -> Implementation   
                Build N -> Design and Deployment -> Testing -> Implementation   

 - Module by module development
 - Customer interation maximum
 - Large Project
 - Early Release Product Demand
 - Flexible to changes                



Sprial Model :-
  Objective               |  Identify and
  Determination and       |  Reslove risks
  Alternative Solution    |       
  -----------------------------------------------------
  Review and Plan for     |  Development Next
  next Phase              |  Version of Product
     
 - Risk Handling
 - Radius of Spiral = COST
 - Angular Dimension = Progress
 - Meta Model because it use multiple model 

 Advantages    :- Risk Handling | Large Project | Customer Statisfaction | Flexible 
 Disadvantages :- Complex       | Expensive     | Too much risk analysis | Time



Difference Between Various SDLC Model :- 
 Classical WaterFall :- Basic    | Rigid | Inflexible | Not for Real Project | Less user interaction | No Feedback
 Iterative Model     :- Basic    | Problem well understood | Provide Feedback 
 Sprial Model        :- Risk     | Not for small project   | No Early lock on requirement | Less experience can work
 Agile Model         :- Flexible | Advanced Parallel       | Process divided into sprint 
 Incremental Model   :- Module by Module Delivery | Easy to test and Debug  | Requirment lock early 
 RAD Model           :- Time and Cost Constraint  | User at all level       | Reusability
 Evoluionary Model   :- Large Project             | No Early Lock on requirement
 Prototype Model :- User Requirment not clear | Costly | No Early Lock on requirement| High user involvement|Reusability
 
 RAD - (Rapid Application Development)



Project Estimation Techniques :-
 Parameter for project estimation :- Project Size | Effort required to complete project | Project duration | Cost
 - Accurate estimation of these parameter is import for resource planning and scheduling
 - Estimation Techniques :-
  - Empirical Techniques 
  - Heuristic Estimation Technique 
  - Analytical Estimation Technique

 Empirical Techniques :-
  - Based on prior experience of development of similar products and projects guess for project parameters
  Type :- 
   Expert Judgment Techniques :- Expert make educated guess of problem size after analyzing problem and component
   Delphi Cost Estimation     :- 
    - By group of experts and coordinator
    - Coordinator provides each estimator with copy of SRS document and form for recording his cost estimation

 Heuristic Techniques :- Relationship among different project parameters modeled using suitable mathematical expression

 Single variable models :-
  - Estimated Parameter = C12* ed1
  - e is characterisitc of software which has already been estimated

 
 COCOMO :- (Construtive Cost Model)
  - By Dr. Barry Boehm in 1981
  - Relationship among different project parameters modeled using suitable mathematical expression
  - Implies that size is primary factor of cost, other factors have lesser effect
  - Attribute :-
    - Ranging in size from 2,000 to 100,000(Line of Code)
    - Programmin language ranging from assembly to PL/L
    - These project were based on the waterfall model of software

  - Software development project can be classified in Three categories :-
    Organic 
    Semidetached
    Embedded
  - KLOC - Kilo Line of Code

  Formula :-
   1)Basic :- EFFORT = a1 x (KLOC)2 x a2 PM


 Person Month :- Effort estimation expressed in units of person Month(PM)



Software Testing :-
 - Method to check whether actual product fulfill expected requirement
 - Involves execution of software component using manual or automated tools to eveluate wheteher it bug free or not
 - Tester runs series of tests to make sure that software performs as expected
 - It Involves user interface, API, Database, Security, Client/Server Communication
 - 4-level testing
 1)Unit        :- Test every individual module or unit of software during development phase
   
 2)Integration :- 
  - Two or more modules are integrated together in groups so test this group 
  - Test During Proper testing Phase
  Types :- Bang Bang, Top Down, Bottom Up, Mixed

 3)System      :- 
  - Test entire and fully integrated software
  Types :-
  1)Based on who is doing Testing :- 
    Alpha       - Check by Developer
    Beta        - Check by nearly user  
    Acceptance  - Customer check

  2)Performance/Non-Functional    :- Volume, Load, Stress, Security, Configuration, Compatibility, Recovery, Install

 4)Regression  :- Test software in specific interval of time to verify fixed bug


 Types of software testing cases:-
  White-Box :- 
   - Internal Structure, Design and software Coding tested
   - Test input/output flow
   - Code is visible to testers so it also called clearbox, openbox, transparent and glass box Testing
   - Perform testing on Path, Loop, Condition, Performance and Memory Consuption 

  Black-Box :- 
   - Tested functionality without having knowledge of internal code structure, implementation detail and Internal Path
   - Also known as Behavior testing and Specification based testing
  
  Grey- Box :-                
   - Combination of Black-Box and White-Box testing
   - Tester test software with partial knowledge of internal code structure
   - Mainly used in web-based application
   


CPM(Critical Path Method) analysis and identify critical path project :-
  Activity    Predecessor   Duration(in Month)    
    A             -             5                 a) A -> C -> E -> F
    B             A             4                 b) A -> B -> D -> F 
    C             A             5                 c) A -> B -> E -> F 
    D             B             6                 d) A -> C -> D -> F 
    E             C             3
    F             D, E          4
  
      Start


Verification vs Validation :-
 Verification :-
  - Are you building it right? (In every phase of software development)
  - Check whether artifact conforms it previous artifact?
  - Done by Developer
  - Concered with phase containment of errors
  - Methods involves Review, Inspection, Unit testing and Integration testing
  - Static and dynamic activity

 Validation :-
  - Have you build right thing? (After complete all phase)
  - Check final product against Specification(SRS Document)
  - Done by tester
  - Aim is to make final product error free
  - Involves system testing
  - Only dynamic
  


