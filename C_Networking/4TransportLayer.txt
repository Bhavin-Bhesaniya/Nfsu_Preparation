Intro to Transport Layer(Layer 4) :- 
 - Provide logical communication between application processes running on different host 
 - Transport layer protocol implemented in end system not in network routers
 - Transport layer provide multiplexing/demultiplexing, reliable data transfer, bandwidth guarantees likes service
 - TCP and UDP two transport layer protocol that provide different set of service to network layer
 - Both TCP and UDP will then communicate with internet protocol in internet layer 
 - Application can read and write to transport layer Therefore communication is two-way process

 Diagram :- Application[AP] --> <-- Transport[TCP | UDP] --> <-- Internet[IP] --> <--

 
 Service :-  
  End-to-end delivery :- Transmit entire message to destination 

  Reliable delivery   :- 
   - Retransmitting lost and damaged packet
   Error Control    :- Perform error checking for end-to-end host to ensure that packet arrived correctly
   Sequence Control :- Receiving end it ensure that various segment of transmission correctly reassembled
   Loss Control     :- Not all fragment arrive at same time so provide sequence number that identify missing segment
   Duplication Control :- Sequence number identify and discard duplicate segment


  Flow Control :
   - Prevent sender from overwhelming receiver
   - If receiver is overloaded with too much data then receiver discard packets and asking for retransmission of 
     packet which increase network congestion and reducing system performance 
   - Sliding window protocol used to prevent it and it is byte oriented rather than frame oriented


  Multiplexing :-
   - Improve transmission efficiency
   Upward multiplexing   :-(3in1) Make cost-effective send transmissions bound for same destination along same path 
   Downward multiplexing :-(1in3) Split connection among several path to improve throughput when low or slow layer cap.
  

  Addressing :-
   - Data generated by application on one machine must transmitted to correct application on another machine
   - Layer provide user address which specified station or port of destination
   - Port variable represent particular TS user of specified station known as Transport Service access point(TSAP) 
   - Each station has only one transport entity
  


Transport Layer protocol :- TCP and UDP
 - When A host sends a message to other host means source process sending process to destination process 
 - Layer protocol define some connection to individual ports known as protocol ports
 - IP protocol is host-to-host protocol used to deliver packet from source host to destination host while transport 
   layer protocol are port-to-port protocol that work on top of IP protocol to deliver packet from originating port 
   to IP services and from IP services to destination port
 - Each port defined by positive integer address and it is of 16 bits

 UDP(User Datagram Protocol) :-
  - Connection-less protocol provide non=sequenced transport functionality
  - Used when reliability and security are less important than speed and size
  - UDP add transport-level addresses, checksum error control and length information of data from upper layer
  - Packet produced by UDP protocol as User Datagram

  User Datagram Format :-
   - User datagram has 16-byte header :-
    Source Port Address(16bits)   Destination Port Address(16bits)
    Total Length of 16 bits       Checksum(16bits)
                             DATA          

   Source port address      :- 16-bit Address of application process that delivered message
   Destination port address :- 16-bit Address of application process that receive message
   Total length :- length of user datagram in bytes, It is 16-bit field
   Checksum     :- 16-bit field used in error detection


  Disadvantages :-
   - Not provide any sequencing or reordering function 
   - Not specify damaged packet when reporting error
   - UDP discover error but not specify which packet lost as it not contain ID or sequencing number of data segment



 TCP(Transmission Control Protocol) :-
  - Connection-oriented protocol means connection established at both end during transmission 
  - TCP generate virtual circuit(Handshake) between sender and receiver for transmission
  - Ensure data transmission in ordered and secure manner
  - TCP use high-level protocol such as FTP, HTTP and SMTP
  - Reliable communication in TCP termed as PAR(Positive Acknowledgement Re-transmission)
  - Handshake known as SYN-SYN-ACK and requires both client and server response to exchange data 
  - SYN means synchronize Sequence Number and ACK means acknowledgment

  Diagram :- (TCP Connection)(3-way Handshake)
    Client              Server
    Send SYN           Receive SYN  (Connection Request)
    Receive SYN+ACK   Send SYN+ACK  (Connection Request received and build connection)
    Send ACK           Receive ACK  (Connection Establish)


  Diagram :- (TCP Termination)(4-way Handshake)
   - FIN segment specifies termination request sent by one device to other
    Client               Server
    Sends FIN      -->   Receives FIN       
    FIN_ACK_WAIT   <--   Sends ACK          (Waiting State for client)
    FIN_WAIT_2     <--   Sends FIN          (Send ACK FIN termination request)
    Last ACK       -->   Connection Closed  ()

    FIN          :- (Termination Request)
    FIN_ACK_WAIT :- Client wait for ACK of FIN Termination request from server
    ACK          :- Server send ACK when receive FIN termination request(Ready to close connection)
    FIN_WAIT_2   :- Signal sent by server for ready to termination
    FIN(Server end) and ACK(Client send signal to server that terminate connection)


  Feature :-
   Reliability  :- Sequence number to each byte expect positive ACK from receiving TCP if not within time retransmitted
   Flow Control :- Receiver TCP send ACK with indicating number bytes receive without overflowing its internal buffer
   Full Duplex  :- Use buffer so that segment flow in both direction at same time 
   Multiplexing :- Combination of different process into single process transmit it over network
   Stream data transfer :- Transfer data in form of contiguous stream of bytes(TCP Segement) than pass to IP layer
   Logical Connection   :- Combination of socket, sequence number and window size | Identified by socket pair

  
  TCP Segment Format :-
    Source port address 16 bits        Destination Port Address 16 bit
                        Sequence Number 32 bits
                    Acknowledgement number 32 bits
    HLEN  Reserved  U  A  P  R  S  F    Window size 16 bit
    4bit   6 bits   R  C  S  S  Y  I
                    G  K  R  T  N  N
                           Options  &  Padding
                     
   Source port address      :- 16-bit address of application program in source computer
   Destination port address :- 16-bit address of application program in receiver computer
   Sequence number :- Stream of data divide into two or more TCP segment and sequence number represent data position 
   Acknowledgement number :- ACK field set to 1 then it specifies sequence number that receiver is expecting is receive
   Header Length(HLEN)    :- Minimum 5 words(20bytes) and maximum 15 word size(60 byte)
   Reserved     :- Reserved for future use
   Control bits :- Define use of segment or serves as validity check for other field
   Window Size  :- Size of window
   Checksum     :- Used in error detection
   Options and padding :- Additional information to receiver
  

   Types of flags in control field :-
    URG : Data in segment is urgent, Set 1 indicating that last urgent data byte 
    ACK : Validate acknowledgement number
    PSH : Inform sender that higher throughput needed
    RST : Reset TCP connection when there is any confusion occurs in sequence number
    SYN : Synchronize sequence numbers Segement :- Connection request | Confirmation(With ACK bit set)|Confirmation ACK
    FIN : Inform that sendeing data finished    :- Termination request | Confirmation | ACK Confirmation
  


 Differences b/w TCP & UDP
    Comparison	                  TCP	                                       UDP
  Transmission type  Virtual circuit created               Transmit data directly without verifying
  Connection Type	   Connection-Oriented                   Connectionless
  Speed	             Slow	                                 High
  Reliability	       Reliable                              Unreliable
  Header size	       20 bytes	                             8 bytes
  Acknowledgement	   Wait for ACK data and ability 	       Neither take ACK nor it retransmit damaged frame
                     to resend lost packet 