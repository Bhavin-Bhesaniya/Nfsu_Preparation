SQL(Structured Query Language) 
 - Enable to perform CRUD operation, Storing and managing data in RDBMS
 - Not case sensitive, keyword written in uppercase
 Advantages of SQL :- High speed | No coding needed | Well defined | Portability | Interactive | Multiple data view
 
 

Datatype :- 
 - Every column have name and data type in database table that define column contain values
 
 Binary Datatype :- 
  binary	   Max length 8000 byte, Fixed-length binary data
  varbinary	 Max length 8000 byte, Variable-length binary data
  image	     Max length 2,147,483,647 byte, Variable-length binary data


 Numeric Datatype :-
  bit	      Number of bit to store
  int	      Integer value
  float	    -1.79E + 308	
  real	    Single precision floating point number -3.40e + 38
  smallint	Small integer value
  decimal	  Numeric value that have decimal number
  numeric	  Specify numeric value


 Character String Datatype :-
  char	    8000           |  Fixed-length non-unicode character
  varchar	  8000           |  Variable-length non-unicode character
  text	    2,147,483,647  |  Variable-length non-unicode character


 Date and time Datatype :-
  date	      Store year, month and days value
  time	      Store hour, minute and second values
  timestamp	  Store year, month, day, hour, minute and second value



Command :- 
 - Communicate with database to Perform specific task, function and queries on data
 
 Data Definition Language (DDL) :-
  - Change structure of table like creating, deleting and altering table | Command are auto-committed
  CREATE   :- CREATE TABLE TABLE_NAME (COLUMN_NAME DATATYPES[,....]);
  ALTER    :- ALTER TABLE table_name ADD column_name COLUMN-definition; 
           -  ALTER TABLE table_name MODIFY(column_definitions....);
           -  Alter structure of database or modify existing attribute to add new attribute
  DROP     :- DROP TABLE table_name;                          | Delete both structure and record stored in table
  TRUNCATE :- TRUNCATE TABLE table_name;                      | Delete all rows from table
  RENAME   :- RENAME table old-table-name to new-table-name;  | Rename Table
  


 Data Manipulation Language (DML):-
  - Modify database | Command not auto-committed and may be rollback
  
  SELECT :- Fetch data from database  |  Return data stored in table known as result-set(DQL)
   - SELECT expression FROM TABLES WHERE conditions;  
   - SELECT column1, column-N FROM table_name;  
   - SELECT  *  FROM table_name;  

  INSERT :- 
   - INSERT INTO TABLE_NAME (col1, col2, col3,.... col N) VALUES (value1, value2, value3, .... valueN); // with
   - INSERT INTO TABLE_NAME VALUES (value1, value2, value3, .... valueN);  // Without Column Name
  
  UPDATE :- 
   - UPDATE table_name SET [column_name1= value1,...column_nameN = valueN] [WHERE CONDITION];
   - UPDATE table_name SET column_name = value WHERE condition;
   - UPDATE table_name SET column1 = value1, column2 = value2, WHERE condition;  
   - UPDATE table_name SET column_name = value1;  

  DELETE :- 
   - DELETE FROM table_name [WHERE condition];  
   - DELETE FROM table_name WHERE some_condition;  
   - DELETE * FROM table_name;    
   Note :- Using WHERE clause, delete single as well as multiple record, not use where if delete all record
   
  Merge : Perform UPSERT operation(Insert or update)
  Call  : Call structured query language or Java subprogram
  Lock Table   : Control concurrency
  Explain Plan : Parameter of explaining data
  


 Data Control Language(DCL):- 
  Grant  :- GRANT SELECT, UPDATE ON MY_TABLE TO SOME_USER, ANOTHER_USER; | Give user access privileges to database
  Revoke :- REVOKE SELECT, UPDATE ON MY_TABLE FROM USER1, USER2;         | Take back permission from user
            [ CONNECT, INSERT, USAGE, EXECUTE, DELETE, UPDATE, SELECT]


 Transaction Control Language(TCL) :-
  - Use with DML command like INSERT, DELETE and UPDATE  |  Automatically committed  
  Commit    :-  COMMIT;    |  Save all transaction to database  
  Rollback  :-  ROLLBACK;  |  Undo transaction that not already saved to database
  SAVEPOINT :-  SAVEPOINT SAVEPOINT_NAME; | Roll transaction to certain point without rolling back entire transaction
  
  

Operator :-
 Arithmetic Operator :- + | - | * | / | %	
 Comparison Operator :- = | != | <> | > | < | >= | <= | !> | !<
 Logical Operator    :- 
  ALL	    Compare with all another values
  AND	    Allow multiple condition in SQL statement
  ANY	    Compare value in list according to condition
  BETWEEN	Search for values that are within set of value
  IN	    Compare value to that specified list value
  NOT	    Reverse meaning of any logical operator
  OR	    Combine multiple condition in SQL statement
  EXISTS	Search for presence of row in specified table
  LIKE	  Compare similar values using wildcard operator(%)



Views :-
 - Virtual table contain rows and columns based on certain condition or all rows of table

 Creating view :- 
  - CREATE VIEW view_name AS SELECT column1, column2.... FROM table_name WHERE condition;  
  - CREATE VIEW DetailsView AS SELECT NAME, ADDRESS FROM Student_Detail WHERE STU_ID < 4;  
  To display data of View MarksView :- SELECT * FROM DetailsView;  

 Creating View from multiple tables :- 
  - CREATE VIEW MarksView AS  SELECT Student_Detail.NAME, Student_Detail.ADDRESS, Student_Marks.MARKS  
    FROM Student_Detail, Student_Mark WHERE Student_Detail.NAME = Student_Marks.NAME;  
  - SELECT * FROM MarksView;  

 Deleting View :- DROP VIEW view_name;



Index :-
 - Special lookup tables used to retrieve data from database very fast 
 Create Index :- CREATE INDEX index_name ON table_name (column1, column2, ...);  
 Unique Index :- CREATE UNIQUE INDEX index_name ON table_name (column1, column2, ...);  
 Drop Index   :- DROP INDEX index_name;  



Sub Query :-
 - Query within another SQL query that embedded within WHERE clause, FROM clause, HAVING clause
 - Subquery use with SELECT, UPDATE, INSERT, DELETE statement along with operator like =, <, >, >=, <=, IN, BETWEEN
 - Outer query main query and inner query is subquery
 - Subqueries are on right side of comparison operator enclosed in parentheses
 - ORDER BY command cannot used But GROUP BY perform same function as ORDER BY

 Subqueries with Select :-
  - SELECT column_name FROM table_name WHERE column_name expression operator   
    (SELECT column_name  from table_name WHERE ... );  

 Subqueries with INSERT :-
  - INSERT INTO table_name (column1, column2, column3....) (SELECT * FROM table_name WHERE VALUE OPERATOR)  

 Subqueries with UPDATE :-
  - UPDATE table SET column_name = new_value WHERE VALUE OPERATOR (SELECT COLUMN_NAME FROM TABLE_NAME WHERE condition);  

 Subqueries with DELETE :-
  - DELETE FROM TABLE_NAME WHERE VALUE OPERATOR (SELECT COLUMN_NAME FROM TABLE_NAME WHERE condition);   



Clauses :-
 GROUP BY :-
  - Arrange data into group used with SELECT query and aggregation function
  Syntax :- SELECT column FROM table_name WHERE conditions GROUP BY column ORDER BY column  


 HAVING :-
  - Specify search condition for group or aggregate
  - Use with GROUP BY clause if not then use HAVING function like WHERE clause
  Syntax :- SELECT column1, column2 FROM table_name WHERE condition GROUP BY column1, column2 HAVING condition
            ORDER BY column1, column2;  

 ORDER BY :-
  - Sort result-set in ascending(default) or descending order
  Syntax :- SELECT column1, column2 FROM table_name WHERE condition ORDER BY column1, column2... ASC|DESC; 



Aggregate Function :- 
 - Perform calculation on multiple row of single column table and return single value
 COUNT :- Count number of rows in column(Numeric | Non-numeric)   | COUNT(*)  |  COUNT([ALL|DISTINCT] expression)  
 SUM :- Sum of all selected column and work on numeric field only |  SUM()    |  SUM([ALL|DISTINCT] expression)  
 AVG :- Return average of all non-Null value(Numeric type)        |  AVG()    |  AVG([ALL|DISTINCT] expression)  
 MAX :- Maximum value of certain column                           |  MAX()    |  MAX([ALL|DISTINCT] expression)  
 MIN :- Minimum value of certain column                           |  MIN()    |  MIN([ALL|DISTINCT] expression)  



JOIN :-
 - Combine two or more tables or records in database

 INNER JOIN :- Matching value in both tables
  Syntax :- SELECT table1.column1, table1.column2, table2.column1 FROM table1 INNER JOIN table2  
            ON table1.matching_column = table2.matching_column;  

 LEFT JOIN :- All record from left table and matching record from right table 
  Syntax :- SELECT table1.column1, table1.column2, table2.column1, FROM table1 LEFT JOIN table2  
            ON table1.matching_column = table2.matching_column;  

 RIGHT JOIN :- All record from right table and matched record from left table 
  Syntax :- SELECT table1.column1, table1.column2, table2.column1 FROM table1 RIGHT JOIN table2  
            ON table1.matching_column = table2.matching_column;  

 FULL JOIN :- Match in either left or right table
  Syntax :- SELECT table1.column1, table1.column2, table2.column1 FROM table1 FULL JOIN table2  
            ON table1.matching_column = table2.matching_column;  



Set :-
 - Combine two or more SQL SELECT statement

 Union :-
  - Eliminate duplicate rows from its resultset | Datatype and column must be same
  Syntax :- SELECT column_name FROM table1 UNION SELECT column_name FROM table2;  

 Union All :-
  - Return set without removing duplication and sorting data
  Syntax :- SELECT column_name FROM table1 UNION ALL SELECT column_name FROM table2;  

 Intersect :-
  - Return common row from both SELECT statement | Datatype and column must be same
  - No duplicate and arrange data in ascending order by default
  Syntax :- SELECT column_name FROM table1  INTERSECT  SELECT column_name FROM table2;  

 Minus :-
  - Display rows present in first query but absent in second query
  Syntax :- SELECT column_name FROM table1 MINUS SELECT column_name FROM table2;  
