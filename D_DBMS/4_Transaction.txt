Transaction :-
 - Group of task or Set of operation called transaction
 - Single logical unit of work which accesses and possible modifies content of database


 Transaction State :-  
  Active state        :- Transaction being executed
  Partially committed :- Transaction execute final operation but data still not saved to database
  Committed :- Execute all operation successfully and Change permanently saved item on database system
  Failed    :- Any check made by database recovery system fail then transaction in failed state
  Aborted   :- 
   - If failed then abort or roll back transaction to bring database into consistent state
   - After aborting transaction recovery module select one of two operation :- Re-start transaction | Kill transaction
  Terminated :-   



Transaction property :-
 - Maintain consistency in database before and after transaction

 Atomicity :- 
  - If any operation performed on data either executed completely or not executed
  - Transaction need to complete till commit if fails it rollback
  - Failed transaction not be resumed but restart
  Operation :- Abort(No Change) | Commit(Save Transaction)

 Consistency :- 
  - If change in database made, it should remain preserved always 
   
 Isolation(Separation) :- 
  - Data should not affect one other and may occur concurrently
  - Operation on one database should begin when operation on first database get complete 
  - If two operation performed on two different database, they not affect value of one another 
  - When occur simultaneously consistency should remain maintained 
  - Any changes occur in any particular transaction not be seen by other transaction until change not committed in memory

 Durability :- 
  - Ensure data after successful execution of operation become permanent store in database 
  - Even if system fails or leads to crash database still survives



Schedule :-
 - Maintain Series order of operation from one transaction to another transaction known as schedule 
 Serial Schedule     :- One transaction executed completely before starting another transaction 
 Non-serial Schedule :- If interleaving of operation allowed then there will be non-serial schedule



Failure Transaction :-
 - Sometime transaction not execute completely due to system crash or hardware failure In that case that rollback 
 
 Transaction failure :- Logical error(Code or internal error) | Syntax error(system not able to execute)   
 System Crash :- Power failure or other hardware or software failure Ex :- OS error
 Disk Failure :- Formation of bad sector, disk head crash and unreachability



Log-Based Recovery :-
 - Log is sequence of record, Any operation performed on database then it recorded as log
 - Log of each transaction maintained in some storage table so any failure occur then it recovered from there
 - Recovery using Log record, Find which transaction need to be undone and redone

 Deferred database modification  :- Transaction not modify database until it committed
 Immediate database modification :- Database modification occur while transaction still active
  


Checkpoint :-
 - All previous logs removed from system and permanently stored in storage disk(Like bookmark)
 - While transaction execution such checkpoint log files created
 - When reach to checkpoint then transaction updated into database till that point entire log file remove from file 
 - Then log file updated with new step of transaction till next checkpoint
 Recovery using Checkpoint :- Read log file from end to start and maintain two list redo-list and an undo-list



Deadlock in DBMS :-
 - Two or more transaction waiting indefinitely for one another to give up lock
 
 Deadlock Avoidance :-
  - Detect any deadlock situation in advance 
  - Wait for graph used for detecting deadlock situation but this method suitable only for smaller database
  - For larger database, deadlock prevention method used
 
 Deadlock Detection :-
  - DBMS should detect whether transaction involved in deadlock or not 
  - Lock manager maintain Wait for graph to detect deadlock cycle in database

  Wait for Graph :-
   - Method for deadlock detection 
   - Graph is created based on transaction and their lock 
   - If created graph has cycle or closed loop then there is deadlock
   - Wait for graph maintained by system for every transaction which waiting for some data hold by other
 
 
 Deadlock Prevention :-
  - If resources allocated in such way that deadlock never occur then deadlock can be prevented
  - DBMS analyze operation of transaction whether they create deadlock situation or not 
  - If they do then DBMS never allowed that transaction to be executed

  Wait-Die scheme :-
   - If transaction requests for A resource which already held with A conflicting lock by another transaction then
     DBMS simply check timestamp of both transaction 
   - Allow older transaction to wait until resource available for execution

  Wound wait scheme :-
   - Older transaction request for resource which held by younger transaction then older transaction forces younger 
     one to kill transaction and release resource 
   - After minute delay younger transaction restarted but with same timestamp
   - If older transaction held resource which requested by Younger transaction then younger transaction asked to wait
     until older releases it


 
Concurrent Transaction :-
 - Transaction run parallely that Improved throughput & Resource utilization
 - Reduced Waiting time :- Unpredictable delays as well as average response time reduced



Serializability :-
 - When multiple transaction executed by os there ossibilities that instruction of one transaction interleaved with
   some other transaction



What is a conflict? :-
 - In Pair of schedule Operation, if operation order interchanged then behavior of at least one transaction change
 Operations are conflict if :- 
  - Belong to different transaction | Access same data item | At least one operation is write operation
  
