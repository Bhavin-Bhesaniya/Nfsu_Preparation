Indexing :-
 - Optimize database performance by minimizing number of disk access required when query process
 Index structure :- [ Search Key | Data Reference ]
  Search key     :- Copy of primary key or candidate key of table 
  Data reference :- Set of pointer hold actual address of memory location where data stored


 Indexing Method :-
  Ordered indices :- Indices sorted to make searching faster
  
  Primary Index :-
   - Base on primary key where Primary keys unique to each record and contain 1:1 relation between record
   Dense index  :- Index record of every search key value make searching faster, Require more space to store index
   Sparse index :- Index record appear only for few item not for everyone, if not found than sequential search perform


  Clustering Index :-
   - Group two or more column to get unique value and create index out of them
   - Record which have similar characteristics grouped and indexes created for these group
   - Sometime index created on non-primary key column which not unique for each record
 

  Secondary Index :-
   - As Size of table grows size of mapping also grow which fetch data from database based on address to overcome it
   - Huge range for column selected initially so that mapping size of first level becomes small 
   - Then each range further divided into smaller range
   - Mapping of first level stored in primary memory so that address fetch is faster and second level actual data 
     stored in secondary memory (hard disk)



B+ Tree(Balanced binary search tree):-
 - Follow multi-level index format
 - Leaf node denote actual data pointer and ensure that all leaf node remain at same height
 - Leaf node linked using link list therefore it support random access as well as sequential access
 
 Structure of B+ Tree :- 
  - Every leaf node at equal distance from root node 
  - Order n where n is fixed for every B+ tree
  
  Internal node :-
   - Contain at least n/2 record pointer except root node
   - At most internal node of tree contain n pointer

  Leaf node :-
   - n/2 record pointer and n/2 key value
   - Every leaf node of B+ tree contain one block pointer P to point to next leaf node
 


Hashing :-
 - Calculate direct location of data record on disk without using index structure
 - Data stored at data blocks whose address generated by using hashing function 
 - Memory location where record stored known as data bucket or data block
 - Hash function use primary key to generate address of data block 
 
 Static Hashing :-
  - Resultant data bucket address will always be same  |  No change in bucket address
  - For EMP_ID =103 using hash functionc mod(5) then it always result in same bucket address 3
  Open Hashing  :- Generate address at which data already stored then next bucket allocate to it called Linear Probing
  Close Hashing :- When bucket full then new data bucket allocated for same hash address called as Overflow chaining

 Dynamic Hashing :-
  - Overcome bucket overflow, data bucket grow or shrink as record Increase or decreases called Extendable hashing 
  
  

RAID(Redundancy Array of Independent Disk) :- 
 - Connect multiple secondary storage device for increased performance, data redundancy
 - Survive one or more drive failure depending upon RAID level 0, ..., RAID 6
 - Consist array of disk in which multiple disk connected
 - OS view these set of separate disk as single logical disk
 - Redundancy disk capacity used to store parity information
 - In case disk failure parity information helped to recover data
 
 RAID 0 :- 
  - Provide data stripping means data place across multiple disk  
  Pros :- Increase Throughput and Performance | Full utilize disk space | Require minimum 2 drives
  Cons :- Doesn't provide fault tolerance     | Failure of disk, Result complete data loss

 
 RAID 1 :- 
  - Mirroring data means copy data from drive 1 to drive 2 
  - 100% redundancy in case failure
  - Half space of drive store data other space mirror of already stored data
  Pros :- Fault tolerance(One fail other automatically takes over) | Array function even drive fail
  Cons :- Extra drive required per drive for mirroring so expense higher


 RAID 2 :-
  - Bit-level striping using Hamming code parity 
  - Each data-bit in word recorded on separate disk and ECC code of data word stored on different set disk
  Pros :- Use one designated drive to store parity | Use hamming code for error detection 
  Cons :- Require additional drive for error detection so high cost | Same performance achieved by RAID 3 at lower Cost


 RAID 3 :-
  - Byte-level striping with dedicated parity 
  - Parity information stored for each disk section and written to dedicated parity drive  
  Pros :- Data regenerated using parity drive  | High data transfer rate | Data accessed in parallel
  Cons :- Required additional drive for parity | Slow performance for operating on small sized file


 RAID 4 :-
  - Block-level stripping with parity disk
  - Instead of duplicating data RAID 4 adopt parity-based approach
  - Allow recovery of at most 1 disk failure due to way parity work
  - If more than one disk fail then there is no way to recover data
  - Level 3 and level 4 both are required at least three disks to implement RAID


 RAID 5 :-
  - Consist block-level striping with DISTRIBUTED parity
  - Parity rotates among drives and Allow recovery of at most 1 disk failure 
  Pros :- Cost effective | Parity distributed across disks in array | Random write performance better
  Cons :- Recovery takes longer time as parity calculated from all drive | Cannot survive concurrent drive failure


 RAID 6 :- 
  - Block-level stripping with 2 parity bits means Survive 2 concurrent disk failures 
  - Disk fail need to replace because if simultaneously another disk fail then won't be able to recover any data
  Pros of RAID 6 :- 
   - Perform RAID 0 to strip data and RAID 1 to mirror
   - Stripping performed before mirroring
   - Drives required multiple of 2
  
  Cons :- Not utilized 100% disk capability as half used for mirroring | Very limited scalability
