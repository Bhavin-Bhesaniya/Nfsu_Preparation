Concurrency Control :- 
 - When multiple user access same database at time known as concurrent execution of database 
 - Recovery with Concurrent Transaction used Checkpoint concept  
 - Thomas write Rule Provide guarantee of serializability order for protocol and improve Basic Timestamp Ordering Algo

 Problems with Concurrent Execution :-
  Lost Update Problem (W - W Conflict) :- Read/write in interleaved manner make database inconsistent
  Dirty Read Problem  (W - R Conflict) :- One transaction update but failed before rollback another transaction access   
  Unrepeatable Read Problem (W-R Conflict) | Inconsistent Retrieval Problem :- Two different value read same data

 

Concurrency Control Protocol :-
 - Ensure ACID property and serializability of concurrent execution of database transaction to Avoiding inconsistancy

 Lock-Based Protocol :-
  - Transaction cannot read or write data until acquire appropriate lock on it at time of execution
  Shared lock    :- Data item only read transaction | Shared between transaction 
  Exclusive lock :- Data item both read as well as written by transaction
  Binary Lock    :- Lock on data item in two state either locked or unlocked

  Simplistic lock   :- All transaction get lock on data before insert, delete or update on it 
  Pre-claiming Lock :- Evaluate transaction to list all data item on which they need lock
  Strict Two-phase locking :- First all lock than Releases all locks at time transaction commit
  Two-phase locking (2PL)  :- Transaction acquire all lock, cannot demand any new lock only releases acquired lock
   Growing phase   :- New lock on data item acquired by transaction but none released
   Shrinking phase :- Existing lock transaction may be released but no new lock acquired
    
 
 Timestamp Ordering Protocol :-
  - Each transaction issue timestamp and Start working as soon as transaction created use system time
  - Transaction order based on their Timestamp means ascending order of transaction creation
  - Older transaction priority higher execute first 
  - Ensure serializability, freedom from deadlock means no transaction ever wait
  - But schedule may not be recoverable and even be cascade-free


 Validation Based Protocol | Optimistic concurrency control:-
  Read phase :- 
   - Transaction T read values and store in temporary local variable for read
   - Perform all write operation on temporary variable without update to actual database

  Validation phase :- Temporary variable value validated against actual data
  Write phase      :- Temporary result written to database or system otherwise transaction rolled back

  Each phase has different timestamp :-
   Start(Ti)       : Ti started its execution.
   Validation (Ti) : Ti finishes its read phase and starts its validation phase
   Finish(Ti)      : Ti finishes its write phase
   TS(T) = validation(T)

   - Serializability determined during validation process can't be decided in advance
   - While executing transaction ensure greater degree of concurrency less number of conflict



Multiple Granularity :
 Granularity : Size of data item allowed to lock

 Multiple Granularity :-
  - Hierarchically breaking up database into blocks which locked
  - Enhance concurrency and reduces lock overhead
  - Decide either lock data item or unlock data item 
 