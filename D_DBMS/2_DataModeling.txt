ER model (Entity-Relationship model) :-
 - High-level data model define data element and relationship for specified system
 - Develop conceptual design or visual representation of database
 - Database structure portrayed as diagram called entity-relationship diagram

 Component :-
  Entity(Record) :- Rectangle
   - Entity may object, class, person or place
   - Entity set collection of similar types of entities
   - Tangible entities physically exist in real world
   - NonTangible   not physically exist in real world

   Weak Entity      :- Double Rectangle | Depend on another entity, Doesn't contain any key attribute
   Composite/Bridge :- Diamond shape with rectangle | M:M entities exist must create Bridge to Convert it 1:M 
   Strong Entity    :- Exist independently
   Recursive Entity :- Relation exist between same entity set(Unary Relationship)
 
  
  Attribute(Column) :- Eclipse
   - Describe property of entity 
   Key Attribute         :- Represent characteristics of entity known as Primary key | Ellipse with underlined text
   Composite Attribute   :- Composed other attribute      | Different connected with ellipse
   Multivalued Attribute :- More than one value           | Double Eclipse
   Derived Attribute     :- Derived from other attribute  | Dashed Ellipse(--)
   Simple Attribute      :- Atomic value cannot divided 


  Relationship | Cardinality :- Diamond
   - Mapping Constraint Known as Data constraint represent relationship between entities
   - High Cardinality means more unique value stored in column and vice versa

   One-to-One   :- One instance of entity associated with relationship                               | 1 - 1
   One-to-many  :- When only one instance of entity associated with more than one instance of entity | 1 - M
   Many-to-one  :- More than one instance of entity associated with one instance of entity           | M - 1 
   Many-to-many :- More than one instance associated with more than different instance of entity     | M - M



 Rules for Convert ER diagram to Table :-
  - Entity -> Table
  - Single-valued attribute -> Column
  - Key attribute of entity -> Represent   by Primary key
  - Multivalued attribute   -> Represented by Separate table
  - Composite attribute     -> Represented by Component 
  - Derived attribute       -> Not considered in table

 
 Total and Partial Partition :-
  Entity  ========   Relationship   --------- Entity
            Total                    Partial
      Full Relationship         Not Relationship        
 

 Generalization :- Bottom-up | Two or more lower entities combine to form higher level entity(Subclass -> Superclass)
 Specialization :- Top-down  | Higher level entity broken down into two lower level entities
 Aggregation    :- Relation between two entities treated as single entity and aggregated into higher level entity
 


Key :-
 - Uniquely identify any record or row data from table | Establish and identify relationship between table

 Primary key   :- Identify one and only one instance of entity uniquely 
 Candidate key :- Except primary key remaining attribute considered candidate key as strong as primary key
 Super Key     :- Superset of candidate key | Combination of uniquely identifier(Primary key)
 Foreign key   :- Point to primary key of another table
 Alternate key :- Total number of candidate keys minus primary key (may or may not exist)
 Composite key(Concatenated Key) :- Whenever primary key consist more than one attribute known as composite key 
 Artificial key :- Created using arbitrarily assigned data, Created when primary key is large and complex has no 
                   relationship with many other relation 



Relational Model :-
 - Represent as table with row and column where row known as tuple and column has name or attribute
 - Name of relation attribute are unique
 - Each relation cell contain exactly one atomic (single) value and no duplicate value 

 Domain    :- Contain set of atomic values that attribute used
 Attribute :- Name of particular table column  
 Relational instance :- Represented by finite set of tuple that not have duplicate tuple
 Relational schema   :- Contain name of relation of all columns or attributes
 Relational key      :- Identify row uniquely
 Relational Algebra  :- Procedural query language that gives step by step process to obtain result of query 

 Relational Calculus :- 
  - Non-procedural query language tells what to do but never explain how to do 
  - Relational calculus including SQL-QBE and QUEL
  - Tuple Relational Calculus (TRC)  |  Domain Relational Calculus (DRC)
  Types of Quantifiers :-
   Universal Quantifier   :- Given set of all tuple satisfy given condition
   Existential Quantifier :- In Given set of tuple at least one occurrences value satisfy given condition
 


Integrity Constraint :-
 - Set of rules used to maintain quality of information
 Key     :- Entity set used to identify entity within its entity set uniquely | Multiple key but One is primary key
 Domain  :- Valid set of value for attribute, Value of attribute must available in corresponding domain
 Entity  :- Primary key value can't be null
 Referential :- Foreign key Table 1, refer Primary Key of Table 2 then Foreign key value null or available in Table 2
