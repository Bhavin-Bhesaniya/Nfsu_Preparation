What is Data and Database?
 - Data is collection of information
 - Database organized collection of data into tables so that easily accessed, retrieve and managed
 - Data stored in database row and column format which called table
 - SQL used to operate on data stored in database
 - DBMS interface between database and enduser
 Level of tree :- Bit(Lower level) -> Byte -> Field -> Record -> File -> Database(Higher level)

 Data administrator :-
  - Responsible for overall management of data resources in organization
  - Selection of hardware and Software  |  Managing data security and privacy



Types of Databases :- 
 
 File-Based :- 1968 | Data maintained in flat file | Access method :- Sequential, Indexed and Random

 Centralized Database :-
  - Store data at centralized database system 
  - User access stored data from different location through several application
  Advantages    :- Decreased risk     | Data consistency maintained     | Provide better data quality | Less costly 
  Disadvantages :- Not easy to update | Response time for fetching data | Server failure entire data lost


 Distributed Database(DDB) :-
  - Data distributed among different database system of organization that connected via communication link
  - Modular development possible  |  One server failure not affect entire data set
  Ex :- Cassandra
  Homogeneous   : Execute on same OS, use same application process and carry same hardware device
  Heterogeneous : Execute on different OS under different application procedure and carry different hardware device
  
  
 Relational Database :-
  - 1970-Present | Store data in form of rows and column(attributes) called table(relation) 
  - E.F. Codd invented relational database model in 1970 
  - Use some mathematical concept like set theory and predicate logic
  - First internet database application created in 1995
  Properties :- ACID


 NoSQL Database :-
  - Storing wide range of data set | Data not only store in tabular form but in several different way
  Advantage    :- High Scalability | High Availability    | Quickly Access       | Not required store data in structur
  Disadvantage :- Open source      | Management challenge | GUI is not available | Backup

  Storage Types :-  
   Key-value storage  :- Store every single item as key(or attribute name) holding its value together(Redis)
   Graph Databases    :- Storing data in graph-like structure (Social networking website use)
   Wide-column store  :- Data stored in large column together, instead of storing in row(Big Table)
   Document-oriented Database :- Store in JSON document(MongoDB)


 Cloud database(Database as service (DBaaS)):-
  - Store, manage and retrieve data in virtual environment via cloud platform that accessible over Internet
  - Provide various service(SaaS, PaaS, IaaS, etc.) for accessing database
  Advantage :- Lower cost | Automated | Increased accessibility 
  

 Object-oriented Database(OODB) :-
  - Use object-based data model approach for storing data 
  - Data represented and stored in form of objects and classes which similar to object used in OOP language
  - Object are real-world entity and classes are collection of object
  Ex :- PostgreSQL
  Properties :- Object | Class | Inheritance | Polymorphism | Encapsulation
  
  
 Graph Database :-
  - NoSQL database graphical representation which contain nodes and edges 
  - Node represent entity and edge represent relationship between two edges 
  - Beneficial for searching relationship between data 
  - Used in supply chain management, identifying source of IP telephony 


 Hierarchical Database :-
  - 1968-1980 | IBM's first DBMS called IMS(Information Management System)
  - Store data parent-children relationship nodes(tree-like structure)
  - Complex implementation | Lack structural independence, can't easily handle many-many relationship  


 Network Database :-
  - Charles Bachman developed at Honeywell called Integrated Data Store (IDS) 
  - Developed in 1960s but standardized in 1971 by CODASYL group (Conference on Data System Language)
  - Represent data in form of node connected via link
  - Each record have multiple children and parent nodes generalized graph structure

  Component :-
   - Network schema (Database organization) | Sub-schema (Views of database) | Data management language (Procedural)
   - Complexity | Difficult to design and maintain



DBMS (Data Base Management System) :-
 - Software used to store and retrieve data
 - Provide interface to accept request from application and specific data through OS
 Advantage    :- Control Redundancy | Data sharing | Backup | Multiple user interfaces | Security
 Disadvantage :- Size | Cost | Complexity | 

 1-Tier Architecture :- Database directly available to user and changes directly done by database itself 
 
 2-Tier Architecture :- 
  - Client-server, Application on client communicate with database at server side
  - For this API's Used like :- ODBC, JDBC
  Diagram :-  [DB](Server-Side) --> [Application | User](Client-Side)

 3-Tier Architecture :-
  - Client can't directly communicate with server
  - Application on client-end interact with application server which further communicate with database system
  Diagram :-  [ DB ]  <-->  [ Application Server ]  <--> [ Application Client | User]
   


RDBMS (Relational Database Management System) :-
 - Tabular DBMS that maintain security, integrity, accuracy and consistecy of data introduced by E. F. Codd
 - From 1970 to 1972, E.F. Codd published paper to propose using relational database model
 - Degree of relationship refer to number of entities in relationship
 - Most Relationship are binary


 Component :-
  Table            :- Collection of related data entries that store data in rows and columns of table 
  Row|Record|Tuple :- Specific information of each entry in table 
  Column/attribute :- Vertical entity contain information with specific field in table 
  Data item/Cells  :- Smallest unit of table in which atomic data store  
  
  Degree :- Total number of attributes that comprise relation known as degree of table
   UNARY   :- Both participating entity type same, 1
   BINARY  :- Two entities involved in relationship, referred as binary, 2
   Ternary :- 3

  Cardinality :- Total number of record at time in relation known as table's cardinality
  Domain      :- Each attribute Specified using standard data types such as integer
  NULL Values :- Specifie that field left blank during record creation


 Schema and Instance :-
  - Data which stored in database at particular moment of time called instance of database
  - Overall design of database called schema :- Physical | Logical | View
  - Database schema skeleton structure of database that represent logical view of entire database
  - Subschema inherit same property that schema has(scheme for view often)
  - Process of database creation called data modeling


 Data Integrity :-
  Entity       :- No duplicate rows in table
  Domain       :- Valid entries for given column by restricting type, format or range of values
  Referential  :- Row cannot deleted which used by other record
  User-defined :- Specific business rules defined by users are different from other integrity



Difference between DBMS and RDBMS :-
              	    DBMS	                                                    RDBMS
  Store data as file so no relation between table	     Store data in tabular form so relationship between table
	Normalization not present                            Normalization present 
	Stored Hierarchical or navigational form 	           Stored in form of tables
	Not security with data manipulation                  Integrity constraint for purpose of ACID property
  Not support distributed database	                   Support distributed database
 	For small organization which deal with small data    Handle large amount of data
  Support single user	                                 Support multiple user
  Ex :- File system, xml    	                         Ex :- Mysql, Postgre, Sql Server, Oracle



Three schema Architecture | ANSI/SPARC | Three-level :- 
 - Schema Define database structure, entities and relationship among them
 - Mapping transform request and response between various database level of architecture

 Diagram :-
  External Schema     External Level      External Level(User view)
                                  \       /            - [External / Conceptual Mapping]  
  Conceptual Schema            Conceptual Level (Logical)
                                      |                - Conceptual / Internal Mapping
  Internal Schema              Internal Level(Physical)
                                      |
                                 [Database]


 Internal Level(Physical Schema) :-
  - Describe physical storage structure of database means How data stored in block
  - Data compression and encryption | Optimization internal structure | Representation of stored field
  Storage Allocation :- B-Tree, Hashing
  Access Path        :- Primary and secondary keys, indexes, pointer and sequencing


 Conceptual Level(Logical Level):-
  - Describe structure of whole database and what relationship exist among those data
  - Object known as entities and relationship association among these entities 
  - Set of attributes describe 'Entity Set' and set of relationships 'relationship set'
  - Designed by Peter Chen and published in 1976 paper 
  Ex :-  student_name, student_id describe 'student' entity 


 External Level(View Schema):- Show different view of database
  

 Mapping between Views :-
  Conceptual | Internal   :- Correspondence record and field of conceptual and files and data structures of internal
  External   | Conceptual :- Correspondence between particular external and conceptual view


 Data independence :- Modify datbase schema at one level without altering schema at next higher level

  Logical Data Independence  :- Change conceptual schema without change external schema
  Physical Data Independence :- Change internal schema without change conceptual schema
   
  Diagram :-  
    External Level   <--->   Logical Level   <--->   Physical Level   <--> Stored Database
                       |                       | 
          Logical Data Independence    Physical Data Independence
