What is Data and Database?
 - Data is collection of information that translated into different form for efficient usage and processing
 - Database organized collection of data into tables so that easily accessed, retrieve and managed
 - Data stored in database is in row and column format which called table
 - SQL or Structured Query Language used to operate on data stored in database
 - Cylindrical structure display image of database



Types of Databases :- 
 
 File-Based :-
  - 1968, data maintained in flat file
  Access method :- Sequential, Indexed and Random


 Centralized Database :-
  - Store data at centralized database system 
  - User access stored data from different location through several application
  Advantages    :- Decreased risk     | Data consistency maintained     | Provide better data quality | Less costly 
  Disadvantages :- Not easy to update | Response time for fetching data | Server failure entire data lost


 Distributed Database(DDB) :-
  - Data distributed among different database system of organization are connected via communication links 
  - Link Help end-users to access data easily 
  - Modular development possible  |  One server failure not affect entire data set
  Ex :- Cassandra
  Homogeneous DDB   : Execute on same OS, use same application process and carry same hardware device
  Heterogeneous DDB : Execute on different OS under different application procedure and carry different hardware device
  
  
 Relational Database :-
  - 1970-Present, Store data in form of rows and column(attributes) together in form of table(relation) 
  - Use SQL for storing, manipulating as well as maintaining data 
  - E.F. Codd invented relational database model in 1970 
  - Each table in database carry key that make data unique from other
  - Instance is table with rows or column
  - Schema specifies structure like name of relation, type of each column and name
  - Use some mathematical concept like set theory and predicate logic
  - First internet database application had been created in 1995
  
  Properties :- ACID


 NoSQL Database :-
  - Storing wide range of data set
  - Not store data only in tabular form but in several different way
  Advantage    :- High Scalability | High Availability    | Quickly Access       | Not required store data in structur
  Disadvantage :- Open source      | Management challenge | GUI is not available | Backup

  Storage Types :-  
  Key-value storage  :- Store every single item as key(or attribute name) holding its value together(Redis)
  Graph Databases    :- Storing data in graph-like structure (Social networking website use)
  Wide-column store  :- Data stored in large column together, instead of storing in row(Big Table)
  Document-oriented Database :- Store in JSON document(MongoDB)


 Cloud database(Database as service (DBaaS)):-
  - Store, manage and retrieve data in virtual environment via cloud platform that accessible over Internet
  - Provide various service(SaaS, PaaS, IaaS, etc.) for accessing database
  Advantage :- Lower cost | Automated | Increased accessibility 
  

 Object-oriented Databases(OODB) :-
  - Use object-based data model approach for storing data 
  - Data represented and stored in form of objects and classes which similar to object used in OOP language
  - Object are real-world entity and classes are collection of object
  Ex :- PostgreSQL
  Properties :- Object | Class | Inheritance | Polymorphism | Encapsulation
  
  
 Graph Database :-
  - NoSQL database graphical representation which contain nodes and edges 
  - Node represent entity and edge represent relationship between two edges 
  - Beneficial for searching relationship between data 
  - Used in supply chain management, identifying source of IP telephony 


 Hierarchical Databases :-
  - 1968-1980, Prominent hierarchical database model was IBM's first DBMS called IMS(Information Management System)
  - Store data in form of parent-children relationship nodes(tree-like structure)
  - Complex implementation | Lack structural independence, can't easily handle many-many relationship  


 Network Database :-
  - Charles Bachman developed at Honeywell called Integrated Data Store (IDS) 
  - Developed in 1960s but standardized in 1971 by CODASYL group (Conference on Data Systems Languages)
  - Represent data in form of node connected via link between them 
  - Allow each record have multiple children and parent nodes to form generalized graph structure

  Component :-
   - Network schema (Database organization) | Sub-schema (Views of database) | Data management language (Procedural)
   - Complexity | Difficult to design and maintain



DBMS (Data Base Management System) :-
 - Software used to store and retrieve data
 - Provide interface to perform various operation
 - Accept request from application and provide specific data through OS
 
 Advantage    :- Control Redundancy | Data sharing | Backup | Multiple user interfaces | Security
 Disadvantage :- Size | Cost | Complexity | 

 1-Tier Architecture :-
  - Database directly available to user and changes directly done by database itself 
  - Doesn't provide handy tool for end user
  - Used for local application where programmer directly communicate with database for quick response
  
 2-Tier Architecture :-
  - Client-server, Application on client communicate with database at server side
  - For this API's Used like :- ODBC, JDBC
  Diagram :-  [DB](Server-Side) --> [Application | User](Client-Side)

 3-Tier Architecture :-
  - Client can't directly communicate with server
  - Application on client-end interact with application server which further communicate with database system
  Diagram :-  [DB | Application Server ]  <--> [Application Client | User]
   


RDBMS (Relational Database Management System) :-
 - Tabular DBMS that maintain security, integrity, accuracy and consistecy of data introduced by E. F. Codd
 - Data represented in rows
 - It contains several tables and each table has its primary key
 - Due to collection of organized set of tables, data accessed easily in RDBMS
 
 Brief History of RDBMS :-
  - From 1970 to 1972, E.F. Codd published paper to propose using relational database model
  - RDBMS originally based on E.F. Codd's relational model invention

 Component :- Table | Record/ Tuple | Field/Column name /Attribute | Instance | Schema | Key
 
 Table :-
  - Everything in relational database is stored in form of relation 
  - Table is collection of related data entries and contain rows and columns to store data 
  - Organized collection of data into relational table known as logical view of database
  - Each table represent some real-world object such as person, place or event about which information is collected 
  - Unique name and Does not contain duplicate tuples
  - All attributes in relation are atomic (Each cell of relation contain exactly one value)
  
 Row or record :-
  - Row of table called record or tuple that contain specific information of each entry in table 
  - Horizontal entity in table    

 Column/attribute :-
  - Vertical entity in table which contain all information associated with specific field in table 
  - Every attribute of relation must have name
  - Null values permitted for attributes
  - Default value specified for attribute automatically inserted if no other value is specified for an attribute
  - Attribute that uniquely identify each record are primary key
 
 Data item/Cells? :-
  - Smallest unit of data in table is individual data item 
  - Data items are atomic
  
 Degree :- Total number of attributes that comprise relation known as degree of table

 Cardinality :- 
  - Total number of record at one time in relation known as table's cardinality 
  - Relation whose cardinality 0 called empty table

 Domain :-
  - Possible values each attribute contain 
  - Specified using standard data types such as integers, floating numbers, etc.
  - Ex :- Attribute entitled Marital_Status may be limited to married or unmarried value

 NULL Values :-
  - Specifies that field has been left blank during record creation
  - It is different from value filled with zero or field that contain space

 Data Integrity :-
  Entity integrity :- No duplicate rows in table
  Domain integrity :- Valid entries for given column by restricting type, format or range of values
  Referential integrity  :- Row cannot be deleted which used by other record
  User-defined integrity :- Specific business rules defined by users are different from other integrity



Difference between DBMS and RDBMS :-
              	    DBMS	                                                    RDBMS
  Store data as file so no relation between table	     Store data in tabular form so relationship between table
	Normalization not present                            Normalization present 
	Stored either hierarchical form or 	                 Tables have identifier called primary key and data value 
  navigational form                                    Stored in form of tables
	Not apply any security with data manipulation        Integrity constraint for purpose of ACID property
  Not support distributed database	                   Support distributed database
 	For small organization which deal with small data    Handle large amount of data
  Support single user	                                 Support multiple user
  Ex :- File system, xml    	                         Ex :- Mysql, Postgre, Sql Server, Oracle



Three schema Architecture | ANSI/SPARC | Three-level:- 
 - Describe structure of specific database system
 - Separate user application and physical database


 Diagram :-
  External Schema     External Level      External Level
                                  \       /            - [External / Conceptual Mapping]  
  Conceptual Schema            Conceptual Level
                                      |                - Conceptual / Internal Mapping
  Internal Schema              Internal Level
                                      |
                                 [Database]

  - Mapping transform request and response between various database level of architecture
  - Not good for small DBMS because it takes more time
 

 Objective of Three schema Architecture :- 
  - Enable multiple users to access same data with personalized view while storing underlying data only once 
  - Separate user's view from physical structure of database 
 

 Internal Level(Physical Schema) :-
  - Describe physical storage structure of database
  - Define that how data stored in block
  - Data compression and encryption | Optimization internal structure | Representation of stored field
  Storage space allocation Ex :- B-Trees, Hashing
  Access path Ex :- Specification of primary and secondary keys, indexes, pointers and sequencing


 Conceptual Level(Logical Level):-
  - Describe structure of whole database and what relationship exists among those data
  - Internal detail such as implementation of data structure are hidden
  - Programmers and database administrator work at this level


 External Level(View Schema):-
  - Show different view of database
  - Each view schema describe database part that particular user group is interested and hide remaining database from 
    that user group
  

 Mapping between Views :-
  - Three level of DBMS architecture don't exist independently of each other their must be correspondence
  - This correspondence known as Mapping
 
  Types of Mapping :-
   Conceptual / Internal Mapping :
    - Correspondence between record and field of conceptual level and files and data structures of internal level

   External/ Conceptual Mapping :-
    - Correspondence between particular external and conceptual view


 Data independence :-
  - Refer to modify schema at one level of database system without altering schema at next higher level

  Types :-
   Logical Data Independence :-
    - Able to change conceptual schema without having to change external schema
    - Separate external level from conceptual view
    - At user interface level, Change in conceptual view of data not affect user view of data
  
   Physical Data Independence :-
    - Change internal schema without change conceptual schema
    - If do any change in storage size of database system server then Conceptual structure of database not be affected
    - Separate conceptual level from internal level
    - Occure at logical interface level
   
   Diagram :-  
      External Level   <--->   Logical Level   <--->   Physical Level   <--> Stored Database
                         |                       | 
             Logical Data Independence    Physical Data Independence



Data Models :-
 - Modeling of data description, data semantics and consistency constraint of data 
 - Provide tools for describing design of database at each level of data abstraction 
 
 Relational Data Model :- 
  - Design data in form of rows and columns within table 
  - Use tables for representing data and in-between relationships 

 Entity-Relationship Data Model :-  
  - Logical representation of data as object and relationship among them 
  - Object known as entities and relationship association among these entities 
  - Designed by Peter Chen and published in 1976 papers 
  - Used in database designing
  - Set of attributes describe entitie and set of known as 'Entity Set' and set of same type of relationships known
    as 'relationship set'
  Ex :-  student_name, student_id describe 'student' entity 

 Object-based Data Model :- 
  - Extension of ER model with notion of function, encapsulation and object identity as well 
  - Support rich type system that include structured and collection type 
  - 1980 objects are nothing but data carrying its properties
 
 Semistructured Data Model :- 
  - Allow data specification at places where individual data item of same type may have different attribute set 
  - Extensible Markup Language also known as XML widely used for representing semistructured data 



Schema and Instance :-
 - Data which stored in database at particular moment of time is called instance of database
 - Overall design of database called schema
 - Database schema is skeleton structure of database that represent logical view of entire database
 - Schema contain schema object like table, foreign key, primary key, views, columns, data types, stored procedure etc.
 - Schema represented by using visual diagram that show database object and relationship with each other
 - Process of database creation called data modeling
 - Schema diagram display only some aspect of schema like name of record type, data type and constraint 



Database Language :- 
 - DB language and interface used to read, store and update the data in the database.
 
 Types :-
  Data Definition Language (DDL) :- 
   - Define database structure or pattern
   - Used to create and update schema(Database skeleton), tables, indexes, constraint in database
   - Store metadata information like number of tables and schema, their names, indexes, columns in each table etc.
   
   Task :- 
    Create : Create database
    Alter  : Alter database structure
    Drop   : Delete object from database
    Truncate : Remove all record from table
    Rename   : Rename object
    Comment  : Comment on data dictionary

  
  Data Manipulation Language (DML) :-
   - Accessing and manipulating data in database

   Task :-
    Select : Retrieve data from database
    Insert : Insert data into table
    Update : Update existing data within table
    Delete : Delete all record from table
    Merge  : Perform UPSERT operation(Insert or update)
    Call   : Call structured query language or Java subprogram
    Explain Plan : Parameter of explaining data
    Lock Table   : Control concurrency
 
 
  Data Control Language (DCL) :- 
   - Retrieve stored or saved data
   - Execution is transactional and has rollback parameters

   Task :- 
    Grant  : User access privileges to database
    Revoke : Take back permission from user [ CONNECT, INSERT, USAGE, EXECUTE, DELETE, UPDATE, SELECT]

  
  Transaction Control Language (TCL) :-
   - Run changes made by DML statement 
   
   Task :- 
    Commit   : Save transaction on database
    Rollback : Restore database to original since last Commit



ACID Properties :- 
 - In DBMS data should remain integrated when any change done in it
 - Because if integrity of data affected, whole data will get disturbed and corrupted 
 - To maintain integrity ACID properties use 
 
 ACID :- Atomicity | Consistency | Isolation | Durability

 Atomicity :- 
  - If any operation performed on data either performed or executed completely or should not be executed at all
  - Transaction need to complete till commit if fails it rollback
  - Failed transaction not be resumed but restart

 Consistency :- 
  - Value should remain preserved always 
  - If change in database made, it should remain preserved always 
   
 Isolation(Separation) :- 
  - Data should not affect other one and may occur concurrently
  - Operation on one database should begin when operation on first database get complete 
  - If two operation performed on two different database, they not affect value of one another 
  - When occur simultaneously consistency should remain maintained 
  - Any changes occur in any particular transaction not be seen by other transaction until change not committed in memory

 Durability :- 
  - Ensure data after successful execution of operation become permanent store in database 
  - Even if system fails or leads to crash database still survives
  
 







